{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.30.23.60470",
      "templateHash": "8020632291343272512"
    }
  },
  "definitions": {
    "DiskCount": {
      "type": "int",
      "allowedValues": [
        0,
        1,
        2,
        4,
        8
      ],
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "shared/types-and-vars.bicep"
        }
      }
    },
    "DiskSizeInGB": {
      "type": "int",
      "allowedValues": [
        1024,
        128,
        2048,
        256,
        32,
        4096,
        512,
        64
      ],
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "shared/types-and-vars.bicep"
        }
      }
    },
    "DiskType": {
      "type": "string",
      "allowedValues": [
        "Premium_SSD",
        "Standard_HDD",
        "Standard_SSD"
      ],
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "shared/types-and-vars.bicep"
        }
      }
    },
    "HeadNodeImage": {
      "type": "string",
      "allowedValues": [
        "CustomImage",
        "WindowsServer2019",
        "WindowsServer2022"
      ],
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "shared/types-and-vars.bicep"
        }
      }
    },
    "HpcPackRelease": {
      "type": "string",
      "allowedValues": [
        "2019 Update 2",
        "2019 Update 3"
      ],
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "shared/types-and-vars.bicep"
        }
      }
    },
    "WindowsComputeNodeImage": {
      "type": "string",
      "allowedValues": [
        "CustomImage",
        "WindowsServer2012",
        "WindowsServer2012R2",
        "WindowsServer2012R2WithExcel",
        "WindowsServer2012R2_Gen2",
        "WindowsServer2012_Gen2",
        "WindowsServer2016",
        "WindowsServer2016WithExcel",
        "WindowsServer2016_Gen2",
        "WindowsServer2019",
        "WindowsServer2019_Gen2",
        "WindowsServer2022",
        "WindowsServer2022_Gen2"
      ],
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "shared/types-and-vars.bicep"
        }
      }
    },
    "YesOrNo": {
      "type": "string",
      "allowedValues": [
        "No",
        "Yes"
      ],
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "shared/types-and-vars.bicep"
        }
      }
    },
    "YesOrNoOrAuto": {
      "type": "string",
      "allowedValues": [
        "Auto",
        "No",
        "Yes"
      ],
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "shared/types-and-vars.bicep"
        }
      }
    }
  },
  "functions": [
    {
      "namespace": "__bicep",
      "members": {
        "getHeadNodeImageRef": {
          "parameters": [
            {
              "$ref": "#/definitions/HpcPackRelease",
              "name": "release"
            },
            {
              "$ref": "#/definitions/HeadNodeImage",
              "name": "imageName"
            },
            {
              "type": "string",
              "nullable": true,
              "name": "customImageId"
            }
          ],
          "output": {
            "type": "object",
            "value": "[union(variables('_1.headNodeImages')[parameters('release')], createObject('CustomImage', createObject('id', parameters('customImageId'))))[parameters('imageName')]]"
          },
          "metadata": {
            "__bicep_imported_from!": {
              "sourceTemplate": "shared/types-and-vars.bicep"
            }
          }
        },
        "isRDMACapable": {
          "parameters": [
            {
              "type": "string",
              "name": "vmSize"
            }
          ],
          "output": {
            "type": "bool",
            "value": "[or(contains(variables('_1.rdmaASeries'), parameters('vmSize')), contains(toLower(split(parameters('vmSize'), '_')[1]), 'r'))]"
          },
          "metadata": {
            "__bicep_imported_from!": {
              "sourceTemplate": "shared/types-and-vars.bicep"
            }
          }
        }
      }
    }
  ],
  "parameters": {
    "hpcPackRelease": {
      "$ref": "#/definitions/HpcPackRelease",
      "defaultValue": "2019 Update 3",
      "metadata": {
        "description": "The release of HPC Pack"
      }
    },
    "clusterName": {
      "type": "string",
      "minLength": 3,
      "maxLength": 15,
      "metadata": {
        "description": "The name of the HPC cluster, also used as the head node name. It must contain between 3 and 15 characters with lowercase letters and numbers, and must start with a letter."
      }
    },
    "headNodeOS": {
      "$ref": "#/definitions/HeadNodeImage",
      "defaultValue": "WindowsServer2019",
      "metadata": {
        "description": "The operating system of the head node."
      }
    },
    "headNodeImageResourceId": {
      "type": "string",
      "defaultValue": "/subscriptions/xxx/resourceGroups/xxx/providers/Microsoft.Compute/images/xxx",
      "metadata": {
        "description": "Specify only when 'CustomImage' selected for headNodeOS. The resource Id of the head node image, it can be a managed VM image in your own subscription (/subscriptions/&lt;SubscriptionId&gt;/resourceGroups/&lt;ResourceGroupName&gt;/providers/Microsoft.Compute/images/&lt;ImageName&gt;) or a shared VM image from Azure Shared Image Gallery (/subscriptions/&lt;SubscriptionId&gt;/resourceGroups/&lt;ResourceGroupName&gt;/providers/Microsoft.Compute/galleries/&lt;GalleryName&gt;/images/&lt;ImageName&gt;/versions/&lt;ImageVersion&gt;)."
      }
    },
    "headNodeOsDiskType": {
      "$ref": "#/definitions/DiskType",
      "defaultValue": "Premium_SSD",
      "metadata": {
        "description": "The disk type of head node VM. Note that Premium_SSD only supports some VM sizes, see <a href='https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-windows-sizes' target='_blank'>Azure VM Sizes</a>"
      }
    },
    "headNodeVMSize": {
      "type": "string",
      "defaultValue": "Standard_DS4_v2",
      "metadata": {
        "description": "The VM size of the head node, all available VM sizes in Azure can be found at <a href='https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-windows-sizes' target='_blank'>Azure VM Sizes</a>. Note that some VM sizes in the list are only available in some particular locations. Please check the availability and the price of the VM sizes at https://azure.microsoft.com/pricing/details/virtual-machines/windows/ before deployment."
      }
    },
    "computeNodeNamePrefix": {
      "type": "string",
      "defaultValue": "IaaSCN",
      "minLength": 1,
      "maxLength": 12,
      "metadata": {
        "description": "The name prefix of the compute nodes. It must be no more than 12 characters, begin with a letter, and contain only letters, numbers and hyphens. For example, if 'IaaSCN' is specified, the compute node names will be 'IaaSCN000', 'IaaSCN001', ..."
      }
    },
    "computeNodeNumber": {
      "type": "int",
      "defaultValue": 10,
      "minValue": 1,
      "maxValue": 500,
      "metadata": {
        "description": "The number of the compute nodes."
      }
    },
    "computeNodeImage": {
      "$ref": "#/definitions/WindowsComputeNodeImage",
      "defaultValue": "WindowsServer2019",
      "metadata": {
        "description": "The VM image of the compute nodes."
      }
    },
    "computeNodeImageResourceId": {
      "type": "string",
      "defaultValue": "/subscriptions/xxx/resourceGroups/xxx/providers/Microsoft.Compute/images/xxx",
      "metadata": {
        "description": "Specify only when 'CustomImage' selected for computeNodeImage. The resource Id of the compute node image, it can be a managed VM image in your own subscription (/subscriptions/&lt;SubscriptionId&gt;/resourceGroups/&lt;ResourceGroupName&gt;/providers/Microsoft.Compute/images/&lt;ImageName&gt;) or a shared VM image from Azure Shared Image Gallery (/subscriptions/&lt;SubscriptionId&gt;/resourceGroups/&lt;ResourceGroupName&gt;/providers/Microsoft.Compute/galleries/&lt;GalleryName&gt;/images/&lt;ImageName&gt;/versions/&lt;ImageVersion&gt;)."
      }
    },
    "computeNodeOsDiskType": {
      "$ref": "#/definitions/DiskType",
      "defaultValue": "Standard_HDD",
      "metadata": {
        "description": "The disk type of compute node VM. Note that Premium_SSD only supports some VM sizes, see <a href='https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-windows-sizes' target='_blank'>Azure VM Sizes</a>"
      }
    },
    "computeNodeVMSize": {
      "type": "string",
      "defaultValue": "Standard_D3_v2",
      "metadata": {
        "description": "The VM size of the compute nodes, all available VM sizes in Azure can be found at <a href='https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-windows-sizes' target='_blank'>Azure VM Sizes</a>. Note that some VM sizes in the list are only available in some particular locations. Please check the availability and the price of the VM sizes at https://azure.microsoft.com/pricing/details/virtual-machines/windows/ before deployment."
      }
    },
    "availabilitySetOption": {
      "type": "string",
      "defaultValue": "Auto",
      "allowedValues": [
        "AllNodes",
        "ComputeNodes",
        "None",
        "Auto"
      ],
      "metadata": {
        "description": "Specify whether you want to create the HPC nodes in an Azure availability set. Select 'AllNodes' to create both head node(s) and compute nodes in an availability set; select 'ComputeNodes' to only create compute nodes in an availability set; select 'Auto' to only create RDMA capable nodes in availability set; select 'None' not to create an availability set."
      }
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "hpcadmin",
      "metadata": {
        "description": "Administrator user name for the virtual machines."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Administrator password for the virtual machines.Password must meet complexity requirements, see https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/password-must-meet-complexity-requirements"
      }
    },
    "enableManagedIdentityOnHeadNode": {
      "$ref": "#/definitions/YesOrNo",
      "defaultValue": "Yes",
      "metadata": {
        "description": "Specify whether to enable system-assigned managed identity on the head node, and use it to manage the Azure IaaS compute nodes."
      }
    },
    "createPublicIPAddressForHeadNode": {
      "$ref": "#/definitions/YesOrNo",
      "defaultValue": "Yes",
      "metadata": {
        "description": "Indicates whether to create a public IP address for head node."
      }
    },
    "enableAcceleratedNetworking": {
      "$ref": "#/definitions/YesOrNo",
      "defaultValue": "No",
      "metadata": {
        "description": "Specify whether to create the Azure VMs with accelerated networking or not. Note accelerated networking is supported only for some VM sizes. If you specify it as 'Yes', you must specify accelerated networking supported VM sizes for all the VMs in the cluster. More information about accelerated networking please see https://docs.microsoft.com/en-us/azure/virtual-network/create-vm-accelerated-networking-powershell."
      }
    },
    "headNodeDataDiskCount": {
      "$ref": "#/definitions/DiskCount",
      "defaultValue": 0,
      "metadata": {
        "description": "The number of data disks attached to the head node VM."
      }
    },
    "headNodeDataDiskSize": {
      "$ref": "#/definitions/DiskSizeInGB",
      "defaultValue": 128,
      "metadata": {
        "description": "The size in GB of each data disk that is attached to the head node VM."
      }
    },
    "headNodeDataDiskType": {
      "$ref": "#/definitions/DiskType",
      "defaultValue": "Standard_HDD",
      "metadata": {
        "description": "Head node data disk type. Note that Premium_SSD only supports some VM sizes, see <a href='https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-windows-sizes' target='_blank'>Azure VM Sizes</a>"
      }
    },
    "computeNodeDataDiskCount": {
      "$ref": "#/definitions/DiskCount",
      "defaultValue": 0,
      "metadata": {
        "description": "The number of data disks attached to the compute node VM."
      }
    },
    "computeNodeDataDiskSize": {
      "$ref": "#/definitions/DiskSizeInGB",
      "defaultValue": 128,
      "metadata": {
        "description": "The size in GB of each data disk that is attached to the compute node VM."
      }
    },
    "computeNodeDataDiskType": {
      "$ref": "#/definitions/DiskType",
      "defaultValue": "Standard_HDD",
      "metadata": {
        "description": "Compute node data disk type. Note that Premium_SSD only supports some VM sizes, see <a href='https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes' target='_blank'>Azure VM Sizes</a>"
      }
    },
    "useVmssForComputeNodes": {
      "$ref": "#/definitions/YesOrNo",
      "defaultValue": "No",
      "metadata": {
        "description": "Specify whether you want to use the experimental feature to create compute nodes as VM scale set. Note that it is not recommended to use this feature in production cluster."
      }
    },
    "useSpotInstanceForComputeNodes": {
      "$ref": "#/definitions/YesOrNo",
      "defaultValue": "No",
      "metadata": {
        "description": "Specify whether you want to use the experimental feature to create compute nodes as <a href='https://azure.microsoft.com/pricing/spot/' target='_blank'>Azure Spot instances</a>. Note that it is not recommended to use this feature in production cluster."
      }
    },
    "autoInstallInfiniBandDriver": {
      "$ref": "#/definitions/YesOrNo",
      "defaultValue": "Yes",
      "metadata": {
        "description": "Specify whether you want to install InfiniBandDriver automatically for the VMs with InfiniBand network. This setting is ignored for the VMs without InfiniBand network."
      }
    },
    "enableAzureMonitor": {
      "$ref": "#/definitions/YesOrNo",
      "defaultValue": "Yes",
      "metadata": {
        "description": "Monitor the HPC Pack cluster in Azure Monitor."
      }
    }
  },
  "variables": {
    "_enableAzureMonitor": "[equals(parameters('enableAzureMonitor'), 'Yes')]",
    "_clusterName": "[trim(parameters('clusterName'))]",
    "_computeNodeNamePrefix": "[trim(parameters('computeNodeNamePrefix'))]",
    "storageAccountName": "[format('hpc{0}', uniqueString(resourceGroup().id, variables('_clusterName')))]",
    "storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
    "addressPrefix": "10.0.0.0/16",
    "subnet1Name": "Subnet-1",
    "subnet1Prefix": "10.0.0.0/22",
    "virtualNetworkName": "[format('{0}vnet', variables('_clusterName'))]",
    "availabilitySetName": "[format('{0}-avset', variables('_clusterName'))]",
    "nsgName": "[format('hpcnsg-{0}', uniqueString(resourceGroup().id))]",
    "cnRDMACapable": "[__bicep.isRDMACapable(parameters('computeNodeVMSize'))]",
    "hnRDMACapable": "[__bicep.isRDMACapable(parameters('headNodeVMSize'))]",
    "autoEnableInfiniBand": "[equals(parameters('autoInstallInfiniBandDriver'), 'Yes')]",
    "useVmssForCN": "[equals(parameters('useVmssForComputeNodes'), 'Yes')]",
    "createHNInAVSet": "[and(not(variables('useVmssForCN')), or(equals(parameters('availabilitySetOption'), 'AllNodes'), and(equals(parameters('availabilitySetOption'), 'Auto'), variables('hnRDMACapable'))))]",
    "createCNInAVSet": "[and(not(variables('useVmssForCN')), or(or(equals(parameters('availabilitySetOption'), 'AllNodes'), equals(parameters('availabilitySetOption'), 'ComputeNodes')), and(equals(parameters('availabilitySetOption'), 'Auto'), variables('cnRDMACapable'))))]",
    "vmPriority": "[if(equals(parameters('useSpotInstanceForComputeNodes'), 'Yes'), 'Spot', 'Regular')]",
    "computeVmssName": "[take(replace(variables('_computeNodeNamePrefix'), '-', ''), 9)]",
    "vmssSinglePlacementGroup": "[lessOrEquals(parameters('computeNodeNumber'), 100)]",
    "headNodeImageRef": "[__bicep.getHeadNodeImageRef(parameters('hpcPackRelease'), parameters('headNodeOS'), trim(parameters('headNodeImageResourceId')))]",
    "_computeNodeImages": "[union(variables('windowsComputeNodeImages'), createObject('CustomImage', createObject('id', trim(parameters('computeNodeImageResourceId')))))]",
    "computeNodeImageRef": "[variables('_computeNodeImages')[parameters('computeNodeImage')]]",
    "_1.headNodeImages": {
      "2019 Update 2": {
        "WindowsServer2019": {
          "publisher": "MicrosoftWindowsServerHPCPack",
          "offer": "WindowsServerHPCPack",
          "sku": "2019hn-ws2019",
          "version": "6.2.7756"
        },
        "WindowsServer2022": {
          "publisher": "MicrosoftWindowsServerHPCPack",
          "offer": "WindowsServerHPCPack",
          "sku": "2019hn-ws2022",
          "version": "6.2.7756"
        },
        "CustomImage": {}
      },
      "2019 Update 3": {
        "WindowsServer2019": {
          "publisher": "MicrosoftWindowsServerHPCPack",
          "offer": "WindowsServerHPCPack",
          "sku": "2019hn-ws2019",
          "version": "latest"
        },
        "WindowsServer2022": {
          "publisher": "MicrosoftWindowsServerHPCPack",
          "offer": "WindowsServerHPCPack",
          "sku": "2019hn-ws2022",
          "version": "latest"
        },
        "CustomImage": {}
      }
    },
    "_1.rdmaASeries": [
      "Standard_A8",
      "Standard_A9"
    ],
    "diskTypes": {
      "Standard_HDD": "Standard_LRS",
      "Standard_SSD": "StandardSSD_LRS",
      "Premium_SSD": "Premium_LRS"
    },
    "sharedResxBaseUrl": "https://raw.githubusercontent.com/Azure/hpcpack-template/master/SharedResources/Generated",
    "windowsComputeNodeImages": {
      "WindowsServer2008R2": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2008-R2-SP1",
        "version": "latest"
      },
      "WindowsServer2012": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2012-Datacenter",
        "version": "latest"
      },
      "WindowsServer2012R2": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2012-R2-Datacenter",
        "version": "latest"
      },
      "WindowsServer2016": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2016-Datacenter",
        "version": "latest"
      },
      "WindowsServer2019": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2019-Datacenter",
        "version": "latest"
      },
      "WindowsServer2022": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2022-datacenter",
        "version": "latest"
      },
      "WindowsServer2012R2WithExcel": {
        "publisher": "MicrosoftWindowsServerHPCPack",
        "offer": "WindowsServerHPCPack",
        "sku": "2016U2CN-WS2012R2-Excel",
        "version": "latest"
      },
      "WindowsServer2016WithExcel": {
        "publisher": "MicrosoftWindowsServerHPCPack",
        "offer": "WindowsServerHPCPack",
        "sku": "2016U2CN-WS2016-Excel",
        "version": "latest"
      },
      "WindowsServer2012_Gen2": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2012-datacenter-gensecond",
        "version": "latest"
      },
      "WindowsServer2012R2_Gen2": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2012-r2-datacenter-gensecond",
        "version": "latest"
      },
      "WindowsServer2016_Gen2": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2016-datacenter-gensecond",
        "version": "latest"
      },
      "WindowsServer2019_Gen2": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2019-datacenter-gensecond",
        "version": "latest"
      },
      "WindowsServer2022_Gen2": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2022-datacenter-g2",
        "version": "latest"
      },
      "CustomImage": {}
    }
  },
  "resources": {
    "storageAccount": {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2023-01-01",
      "name": "[variables('storageAccountName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "Storage",
      "properties": {}
    },
    "availabilitySet": {
      "condition": "[or(variables('createHNInAVSet'), variables('createCNInAVSet'))]",
      "type": "Microsoft.Compute/availabilitySets",
      "apiVersion": "2023-03-01",
      "name": "[variables('availabilitySetName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Aligned"
      },
      "properties": {
        "platformUpdateDomainCount": 5,
        "platformFaultDomainCount": 2
      }
    },
    "setupHeadNode": {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2023-03-01",
      "name": "[format('{0}/setupHpcHeadNode', variables('_clusterName'))]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.80",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "configuration": {
            "url": "[format('{0}/InstallPrimaryHeadNode.ps1.zip', variables('sharedResxBaseUrl'))]",
            "script": "InstallPrimaryHeadNode.ps1",
            "function": "InstallPrimaryHeadNode"
          },
          "configurationArguments": {
            "ClusterName": "[variables('_clusterName')]",
            "SSLThumbprint": "[reference('keyVault').outputs.certSettings.value.thumbprint]",
            "CNSize": "[parameters('computeNodeVMSize')]",
            "SubscriptionId": "[subscription().subscriptionId]",
            "VNet": "[variables('virtualNetworkName')]",
            "Subnet": "[variables('subnet1Name')]",
            "Location": "[resourceGroup().location]",
            "ResourceGroup": "[resourceGroup().name]",
            "VaultResourceGroup": "[reference('keyVault').outputs.certSettings.value.vaultResourceGroup]",
            "CertificateUrl": "[reference('keyVault').outputs.certSettings.value.url]",
            "CNNamePrefix": "[variables('_computeNodeNamePrefix')]",
            "AutoGSUseManagedIdentity": "[equals(parameters('enableManagedIdentityOnHeadNode'), 'Yes')]"
          }
        },
        "protectedSettings": {
          "configurationArguments": {
            "SetupUserCredential": {
              "UserName": "[parameters('adminUsername')]",
              "Password": "[parameters('adminPassword')]"
            },
            "AzureStorageConnString": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1}', variables('storageAccountName'), listKeys(variables('storageAccountId'), '2019-04-01').keys[0].value)]"
          }
        }
      },
      "dependsOn": [
        "headNode",
        "keyVault",
        "storageAccount"
      ]
    },
    "keyVault": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "KeyVaultWithCert",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "10685993406751981134"
            }
          },
          "definitions": {
            "CertificateSettings": {
              "type": "object",
              "properties": {
                "vaultResourceGroup": {
                  "type": "string"
                },
                "vaultName": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "thumbprint": {
                  "type": "string"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "types-and-vars.bicep"
                }
              }
            }
          },
          "parameters": {
            "vaultNamePrefix": {
              "type": "string",
              "defaultValue": "keyvault"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            }
          },
          "variables": {
            "$fxv#0": "Param(\r\n  [Alias(\"v\")]\r\n  [string] $vaultName,\r\n  [Alias(\"c\")]\r\n  [string] $commonName = \"HPCPackCommunication\",\r\n  [Alias(\"n\")]\r\n  [string] $certName = \"HPCPackCommunication\"\r\n)\r\n\r\n$ErrorActionPreference = 'Stop'\r\n\r\nif($commonName.StartsWith(\"CN=\"))\r\n{\r\n    $subjectName = $commonName\r\n}\r\nelse\r\n{\r\n    $subjectName = \"CN=$commonName\"\r\n}\r\n\r\n\"Create a self-signed certificate '$certName' in the Azure Key Vault '$vaultName' with subject name '$subjectName'.\" | Out-Default\r\n\r\n$certPolicy = New-AzKeyVaultCertificatePolicy -SecretContentType \"application/x-pkcs12\" -SubjectName $subjectName -IssuerName \"Self\" -ValidityInMonths 60 -ReuseKeyOnRenewal -KeyUsage DigitalSignature, KeyAgreement, KeyEncipherment, KeyCertSign -Ekus \"1.3.6.1.5.5.7.3.1\", \"1.3.6.1.5.5.7.3.2\"\r\n\r\nAdd-AzKeyVaultCertificate -VaultName $vaultName -Name $certName -CertificatePolicy $certPolicy\r\n\r\n\"Waiting for the certificate to be ready...\" | Out-Default\r\nStart-Sleep -Seconds 5\r\n\r\n$keyVaultCert = Get-AzKeyVaultCertificate -VaultName $vaultName -Name $certName\r\nwhile(!$keyVaultCert.Thumbprint -or !$keyVaultCert.SecretId)\r\n{\r\n    Start-Sleep -Seconds 2\r\n    $keyVaultCert = Get-AzKeyVaultCertificate -VaultName $vaultName -Name $certName\r\n}\r\n\"The Azure Key Vault certificate '$certName' is ready for use.\" | Out-Default\r\n\r\n$DeploymentScriptOutputs = @{\r\n  thumbprint = $keyVaultCert.Thumbprint\r\n  url = $keyVaultCert.SecretId\r\n}\r\n\r\n$DeploymentScriptOutputs | Out-Default\r\n",
            "suffix": "[uniqueString(resourceGroup().id)]",
            "vaultName": "[take(format('{0}-{1}', parameters('vaultNamePrefix'), variables('suffix')), 24)]",
            "rgName": "[resourceGroup().name]"
          },
          "resources": {
            "keyVault": {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2024-04-01-preview",
              "name": "[variables('vaultName')]",
              "location": "[parameters('location')]",
              "properties": {
                "sku": {
                  "name": "standard",
                  "family": "A"
                },
                "tenantId": "[tenant().tenantId]",
                "accessPolicies": [],
                "enabledForDeployment": true,
                "enabledForDiskEncryption": true,
                "enabledForTemplateDeployment": true,
                "enableSoftDelete": true,
                "softDeleteRetentionInDays": 90,
                "enableRbacAuthorization": true,
                "publicNetworkAccess": "Enabled"
              }
            },
            "userMiForNewCert": {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "userMiForNewCert",
              "location": "[parameters('location')]"
            },
            "roleAssignment": {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', variables('vaultName'))]",
              "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'userMiForNewCert'), 'Contributor')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                "principalId": "[reference('userMiForNewCert').principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "keyVault",
                "userMiForNewCert"
              ]
            },
            "newCert": {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2023-08-01",
              "name": "newCert",
              "location": "[parameters('location')]",
              "kind": "AzurePowerShell",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'userMiForNewCert'))]": {}
                }
              },
              "properties": {
                "azPowerShellVersion": "10.0",
                "cleanupPreference": "OnExpiration",
                "retentionInterval": "PT1H",
                "scriptContent": "[variables('$fxv#0')]",
                "arguments": "[format('-v {0}', variables('vaultName'))]"
              },
              "dependsOn": [
                "roleAssignment",
                "userMiForNewCert"
              ]
            }
          },
          "outputs": {
            "certSettings": {
              "$ref": "#/definitions/CertificateSettings",
              "value": {
                "thumbprint": "[reference('newCert').outputs.thumbprint]",
                "url": "[reference('newCert').outputs.url]",
                "vaultName": "[variables('vaultName')]",
                "vaultResourceGroup": "[variables('rgName')]"
              }
            }
          }
        }
      }
    },
    "monitor": {
      "condition": "[variables('_enableAzureMonitor')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "AzureMonitor",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('_clusterName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "933294187094482452"
            }
          },
          "definitions": {
            "AzureMonitorAgentSettings": {
              "type": "object",
              "properties": {
                "userMiResId": {
                  "type": "string"
                },
                "dcrResId": {
                  "type": "string"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "types-and-vars.bicep"
                }
              }
            },
            "AzureMonitorLogSettings": {
              "type": "object",
              "properties": {
                "LA_MiResId": {
                  "type": "string"
                },
                "LA_MiClientId": {
                  "type": "string"
                },
                "LA_DcrId": {
                  "type": "string"
                },
                "LA_DcrStream": {
                  "type": "string"
                },
                "LA_DceUrl": {
                  "type": "string"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "types-and-vars.bicep"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "defaultValue": "azuremonitor"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            }
          },
          "variables": {
            "uniqStr": "[uniqueString(resourceGroup().id)]",
            "prefix": "[format('{0}-{1}-', parameters('name'), variables('uniqStr'))]",
            "workSpaceName": "[format('{0}workspace', variables('prefix'))]"
          },
          "resources": {
            "workSpace": {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2023-09-01",
              "name": "[variables('workSpaceName')]",
              "location": "[parameters('location')]"
            },
            "userMiForAma": {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "userMiForMa",
              "location": "[parameters('location')]"
            },
            "logIngestion": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "logIngestion",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "workSpaceName": {
                    "value": "[variables('workSpaceName')]"
                  },
                  "prefix": {
                    "value": "[variables('prefix')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "2774853078011716515"
                    }
                  },
                  "parameters": {
                    "workSpaceName": {
                      "type": "string"
                    },
                    "prefix": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Insights/dataCollectionEndpoints",
                      "apiVersion": "2023-03-11",
                      "name": "[format('{0}logIngestionDce', parameters('prefix'))]",
                      "location": "[parameters('location')]",
                      "properties": {}
                    },
                    {
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2023-01-31",
                      "name": "[format('{0}logIngestionUserMi', parameters('prefix'))]",
                      "location": "[parameters('location')]"
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}logIngestionCustomTable', parameters('prefix'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "prefix": {
                            "value": "[parameters('prefix')]"
                          },
                          "workSpaceName": {
                            "value": "[parameters('workSpaceName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "7197570351787999488"
                            }
                          },
                          "parameters": {
                            "prefix": {
                              "type": "string"
                            },
                            "workSpaceName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]"
                            }
                          },
                          "variables": {
                            "$fxv#0": "param(\r\n  [string] $workSpaceResId\r\n)\r\n\r\n$ErrorActionPreference = 'Stop'\r\n\r\n# NOTE: The column \"TimeGenerated\" is mandatory. Do not change the name and type.\r\n$tableParams = @'\r\n{\r\n  \"properties\": {\r\n    \"schema\": {\r\n      \"name\": \"TraceListener_CL\",\r\n      \"columns\": [\r\n        {\r\n          \"name\": \"TimeGenerated\",\r\n          \"type\": \"datetime\",\r\n          \"description\": \"The time at which the log was generated\"\r\n        },\r\n        {\r\n          \"name\": \"ComputerName\",\r\n          \"type\": \"string\",\r\n          \"description\": \"The name of the computer that generated the log\"\r\n        },\r\n        {\r\n          \"name\": \"ProcessName\",\r\n          \"type\": \"string\",\r\n          \"description\": \"The name of the process that generated the log\"\r\n        },\r\n        {\r\n          \"name\": \"ProcessId\",\r\n          \"type\": \"int\",\r\n          \"description\": \"The id of the process that generated the log\"\r\n        },\r\n        {\r\n          \"name\": \"EventType\",\r\n          \"type\": \"string\",\r\n          \"description\": \"Log event type, such as error, info, etc.\"\r\n        },\r\n        {\r\n          \"name\": \"EventId\",\r\n          \"type\": \"int\",\r\n          \"description\": \"Log event id\"\r\n        },\r\n        {\r\n          \"name\": \"Source\",\r\n          \"type\": \"string\",\r\n          \"description\": \"Log source\"\r\n        },\r\n        {\r\n          \"name\": \"Content\",\r\n          \"type\": \"string\",\r\n          \"description\": \"Log content\"\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}\r\n'@\r\n\r\n# TODO: Fail the script on failed HTTP request!\r\nInvoke-AzRestMethod -Path \"$workSpaceResId/tables/TraceListener_CL?api-version=2022-10-01\" -Method PUT -payload $tableParams"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                              "apiVersion": "2023-01-31",
                              "name": "[format('{0}userMiForScript', parameters('prefix'))]",
                              "location": "[parameters('location')]"
                            },
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('workSpaceName'))]",
                              "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}userMiForScript', parameters('prefix'))), 'Contributor')]",
                              "properties": {
                                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}userMiForScript', parameters('prefix'))), '2023-01-31').principalId]",
                                "principalType": "ServicePrincipal"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}userMiForScript', parameters('prefix')))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Resources/deploymentScripts",
                              "apiVersion": "2023-08-01",
                              "name": "[format('{0}createTable', parameters('prefix'))]",
                              "location": "[parameters('location')]",
                              "kind": "AzurePowerShell",
                              "identity": {
                                "type": "UserAssigned",
                                "userAssignedIdentities": {
                                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}userMiForScript', parameters('prefix'))))]": {}
                                }
                              },
                              "properties": {
                                "azPowerShellVersion": "10.0",
                                "cleanupPreference": "OnExpiration",
                                "retentionInterval": "PT1H",
                                "scriptContent": "[variables('$fxv#0')]",
                                "arguments": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workSpaceName'))]"
                              },
                              "dependsOn": [
                                "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workSpaceName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}userMiForScript', parameters('prefix'))), 'Contributor'))]",
                                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}userMiForScript', parameters('prefix')))]"
                              ]
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}logIngestionDcr', parameters('prefix'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "dataCollectionRuleName": {
                            "value": "[format('{0}dcrLogIngestionApi', parameters('prefix'))]"
                          },
                          "workspaceResId": {
                            "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workSpaceName'))]"
                          },
                          "dataCollectionEndpointId": {
                            "value": "[resourceId('Microsoft.Insights/dataCollectionEndpoints', format('{0}logIngestionDce', parameters('prefix')))]"
                          },
                          "userMiPrincipalIds": {
                            "value": [
                              "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}logIngestionUserMi', parameters('prefix'))), '2023-01-31').principalId]"
                            ]
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "4084763194363877539"
                            }
                          },
                          "parameters": {
                            "dataCollectionRuleName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]"
                            },
                            "workspaceResId": {
                              "type": "string"
                            },
                            "dataCollectionEndpointId": {
                              "type": "string",
                              "nullable": true
                            },
                            "userMiPrincipalIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "defaultValue": []
                            }
                          },
                          "variables": {
                            "dcrStreamName": "Custom-TraceListener"
                          },
                          "resources": {
                            "logIngestionDcr": {
                              "type": "Microsoft.Insights/dataCollectionRules",
                              "apiVersion": "2023-03-11",
                              "name": "[parameters('dataCollectionRuleName')]",
                              "location": "[parameters('location')]",
                              "kind": "Direct",
                              "properties": {
                                "dataCollectionEndpointId": "[parameters('dataCollectionEndpointId')]",
                                "streamDeclarations": {
                                  "[format('{0}', variables('dcrStreamName'))]": {
                                    "columns": [
                                      {
                                        "name": "Time",
                                        "type": "datetime"
                                      },
                                      {
                                        "name": "ComputerName",
                                        "type": "string"
                                      },
                                      {
                                        "name": "ProcessName",
                                        "type": "string"
                                      },
                                      {
                                        "name": "ProcessId",
                                        "type": "int"
                                      },
                                      {
                                        "name": "EventType",
                                        "type": "string"
                                      },
                                      {
                                        "name": "Id",
                                        "type": "int"
                                      },
                                      {
                                        "name": "Source",
                                        "type": "string"
                                      },
                                      {
                                        "name": "Content",
                                        "type": "string"
                                      }
                                    ]
                                  }
                                },
                                "destinations": {
                                  "logAnalytics": [
                                    {
                                      "workspaceResourceId": "[parameters('workspaceResId')]",
                                      "name": "myworkspace"
                                    }
                                  ]
                                },
                                "dataFlows": [
                                  {
                                    "streams": [
                                      "[variables('dcrStreamName')]"
                                    ],
                                    "destinations": [
                                      "myworkspace"
                                    ],
                                    "transformKql": "source | project TimeGenerated = Time, ComputerName, ProcessName, ProcessId, EventType, EventId = Id, Source, Content",
                                    "outputStream": "Custom-TraceListener_CL"
                                  }
                                ]
                              }
                            },
                            "roleAssignment": {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('userMiPrincipalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Insights/dataCollectionRules/{0}', parameters('dataCollectionRuleName'))]",
                              "name": "[guid(parameters('userMiPrincipalIds')[copyIndex()], 'Monitoring Metrics Publisher')]",
                              "properties": {
                                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                                "principalId": "[parameters('userMiPrincipalIds')[copyIndex()]]",
                                "principalType": "ServicePrincipal"
                              },
                              "dependsOn": [
                                "logIngestionDcr"
                              ]
                            }
                          },
                          "outputs": {
                            "dcrResId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Insights/dataCollectionRules', parameters('dataCollectionRuleName'))]"
                            },
                            "dcrRunId": {
                              "type": "string",
                              "value": "[reference('logIngestionDcr').immutableId]"
                            },
                            "dcrStreamName": {
                              "type": "string",
                              "value": "[variables('dcrStreamName')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('{0}logIngestionCustomTable', parameters('prefix')))]",
                        "[resourceId('Microsoft.Insights/dataCollectionEndpoints', format('{0}logIngestionDce', parameters('prefix')))]",
                        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}logIngestionUserMi', parameters('prefix')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "logsIngestionEndpoint": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Insights/dataCollectionEndpoints', format('{0}logIngestionDce', parameters('prefix'))), '2023-03-11').logsIngestion.endpoint]"
                    },
                    "dcrRunId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}logIngestionDcr', parameters('prefix'))), '2022-09-01').outputs.dcrRunId.value]"
                    },
                    "dcrStreamName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}logIngestionDcr', parameters('prefix'))), '2022-09-01').outputs.dcrStreamName.value]"
                    },
                    "userMiResId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}logIngestionUserMi', parameters('prefix')))]"
                    },
                    "userMiClientId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}logIngestionUserMi', parameters('prefix'))), '2023-01-31').clientId]"
                    }
                  }
                }
              },
              "dependsOn": [
                "workSpace"
              ]
            },
            "dcrForWinEvents": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "dataCollectionRules",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "workspaceLocation": {
                    "value": "[parameters('location')]"
                  },
                  "workspaceResourceId": {
                    "value": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workSpaceName'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "17296570083588436459"
                    }
                  },
                  "parameters": {
                    "workspaceResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Workspace Resource ID."
                      }
                    },
                    "workspaceLocation": {
                      "type": "string",
                      "metadata": {
                        "description": "Workspace Location."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Insights/dataCollectionRules",
                      "apiVersion": "2021-04-01",
                      "name": "dcrForSystemLog",
                      "location": "[parameters('workspaceLocation')]",
                      "properties": {
                        "description": "Data collection rule for Windows Event log or Linux Syslog",
                        "dataSources": {
                          "windowsEventLogs": [
                            {
                              "name": "Application",
                              "streams": [
                                "Microsoft-Event"
                              ],
                              "scheduledTransferPeriod": "PT1M",
                              "xPathQueries": [
                                "Application!*[System[(Level=1 or Level=2 or Level=3 or Level=4 or Level=0)]]"
                              ]
                            },
                            {
                              "name": "Microsoft_HPC_Pack",
                              "streams": [
                                "Microsoft-Event"
                              ],
                              "scheduledTransferPeriod": "PT1M",
                              "xPathQueries": [
                                "\"Microsoft HPC Pack\"!*"
                              ]
                            },
                            {
                              "name": "Windows_HPC_Server",
                              "streams": [
                                "Microsoft-Event"
                              ],
                              "scheduledTransferPeriod": "PT1M",
                              "xPathQueries": [
                                "\"Windows HPC Server\"!*"
                              ]
                            }
                          ]
                        },
                        "destinations": {
                          "logAnalytics": [
                            {
                              "workspaceResourceId": "[parameters('workspaceResourceId')]",
                              "name": "myWorkspace"
                            }
                          ]
                        },
                        "dataFlows": [
                          {
                            "streams": [
                              "Microsoft-Event"
                            ],
                            "destinations": [
                              "myWorkspace"
                            ]
                          }
                        ]
                      }
                    }
                  ],
                  "outputs": {
                    "dcrResId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Insights/dataCollectionRules', 'dcrForSystemLog')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "workSpace"
              ]
            }
          },
          "outputs": {
            "logSettings": {
              "$ref": "#/definitions/AzureMonitorLogSettings",
              "value": {
                "LA_DceUrl": "[reference('logIngestion').outputs.logsIngestionEndpoint.value]",
                "LA_DcrId": "[reference('logIngestion').outputs.dcrRunId.value]",
                "LA_DcrStream": "[reference('logIngestion').outputs.dcrStreamName.value]",
                "LA_MiClientId": "[reference('logIngestion').outputs.userMiClientId.value]",
                "LA_MiResId": "[reference('logIngestion').outputs.userMiResId.value]"
              }
            },
            "amaSettings": {
              "$ref": "#/definitions/AzureMonitorAgentSettings",
              "value": {
                "userMiResId": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'userMiForMa')]",
                "dcrResId": "[reference('dcrForWinEvents').outputs.dcrResId.value]"
              }
            }
          }
        }
      }
    },
    "vnet": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "createVNet",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "vNetName": {
            "value": "[variables('virtualNetworkName')]"
          },
          "addressPrefix": {
            "value": "[variables('addressPrefix')]"
          },
          "subnetName": {
            "value": "[variables('subnet1Name')]"
          },
          "subnetPrefix": {
            "value": "[variables('subnet1Prefix')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "1888521141722433670"
            }
          },
          "parameters": {
            "vNetName": {
              "type": "string"
            },
            "addressPrefix": {
              "type": "string"
            },
            "subnetName": {
              "type": "string"
            },
            "subnetPrefix": {
              "type": "string"
            },
            "dnsSeverIp": {
              "type": "string",
              "nullable": true
            }
          },
          "variables": {
            "dhcpOpts": "[if(empty(parameters('dnsSeverIp')), null(), createObject('dnsServers', createArray(parameters('dnsSeverIp'), '8.8.8.8')))]"
          },
          "resources": {
            "vnet": {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2023-04-01",
              "name": "[parameters('vNetName')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[parameters('addressPrefix')]"
                  ]
                },
                "dhcpOptions": "[variables('dhcpOpts')]",
                "subnets": [
                  {
                    "name": "[parameters('subnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('subnetPrefix')]"
                    }
                  }
                ]
              }
            }
          },
          "outputs": {
            "vNetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vNetName'))]"
            }
          }
        }
      }
    },
    "nsg": {
      "condition": "[equals(parameters('createPublicIPAddressForHeadNode'), 'Yes')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "nsg",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('nsgName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "16197833208889092205"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2023-04-01",
              "name": "[parameters('name')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "securityRules": [
                  {
                    "name": "allow-HTTPS",
                    "properties": {
                      "description": "Allow Https",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "443",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 1000,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "allow-RDP",
                    "properties": {
                      "description": "Allow RDP",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "3389",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 1010,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "allow-HPCSession",
                    "properties": {
                      "description": "Allow HPC Session service",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "9090",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 1020,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "allow-HPCBroker",
                    "properties": {
                      "description": "Allow HPC Broker service",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "9087",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 1030,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "allow-HPCBrokerWorker",
                    "properties": {
                      "description": "Allow HPC Broker worker",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "9091",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 1040,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "allow-HPCDataService",
                    "properties": {
                      "description": "Allow HPC Data service",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "9094 ",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 1050,
                      "direction": "Inbound"
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    },
    "headNode": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[variables('_clusterName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "certSettings": {
            "value": "[reference('keyVault').outputs.certSettings.value]"
          },
          "clusterName": {
            "value": "[variables('_clusterName')]"
          },
          "createPublicIp": {
            "value": "[equals(parameters('createPublicIPAddressForHeadNode'), 'Yes')]"
          },
          "enableAcceleratedNetworking": {
            "value": "[equals(parameters('enableAcceleratedNetworking'), 'Yes')]"
          },
          "enableManagedIdentity": {
            "value": "[equals(parameters('enableManagedIdentityOnHeadNode'), 'Yes')]"
          },
          "hnAvSetName": "[if(variables('createHNInAVSet'), createObject('value', variables('availabilitySetName')), createObject('value', null()))]",
          "hnDataDiskCount": {
            "value": "[parameters('headNodeDataDiskCount')]"
          },
          "hnDataDiskSize": {
            "value": "[parameters('headNodeDataDiskSize')]"
          },
          "hnDataDiskType": {
            "value": "[parameters('headNodeDataDiskType')]"
          },
          "hnImageRef": {
            "value": "[variables('headNodeImageRef')]"
          },
          "hnName": {
            "value": "[variables('_clusterName')]"
          },
          "hnOsDiskType": {
            "value": "[parameters('headNodeOsDiskType')]"
          },
          "hnVMSize": {
            "value": "[parameters('headNodeVMSize')]"
          },
          "installIBDriver": {
            "value": "[and(variables('hnRDMACapable'), variables('autoEnableInfiniBand'))]"
          },
          "logSettings": "[if(variables('_enableAzureMonitor'), createObject('value', reference('monitor').outputs.logSettings.value), createObject('value', null()))]",
          "amaSettings": "[if(variables('_enableAzureMonitor'), createObject('value', reference('monitor').outputs.amaSettings.value), createObject('value', null()))]",
          "nsgName": "[if(equals(parameters('createPublicIPAddressForHeadNode'), 'Yes'), createObject('value', variables('nsgName')), createObject('value', null()))]",
          "privateIp": {
            "value": "10.0.0.4"
          },
          "subnetId": {
            "value": "[format('{0}/subnets/{1}', reference('vnet').outputs.vNetId.value, variables('subnet1Name'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "11142044395040566453"
            }
          },
          "definitions": {
            "AzureMonitorAgentSettings": {
              "type": "object",
              "properties": {
                "userMiResId": {
                  "type": "string"
                },
                "dcrResId": {
                  "type": "string"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "types-and-vars.bicep"
                }
              }
            },
            "AzureMonitorLogSettings": {
              "type": "object",
              "properties": {
                "LA_MiResId": {
                  "type": "string"
                },
                "LA_MiClientId": {
                  "type": "string"
                },
                "LA_DcrId": {
                  "type": "string"
                },
                "LA_DcrStream": {
                  "type": "string"
                },
                "LA_DceUrl": {
                  "type": "string"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "types-and-vars.bicep"
                }
              }
            },
            "CertificateSettings": {
              "type": "object",
              "properties": {
                "vaultResourceGroup": {
                  "type": "string"
                },
                "vaultName": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "thumbprint": {
                  "type": "string"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "types-and-vars.bicep"
                }
              }
            }
          },
          "functions": [
            {
              "namespace": "__bicep",
              "members": {
                "certSecretForWindows": {
                  "parameters": [
                    {
                      "type": "string",
                      "name": "vaultRg"
                    },
                    {
                      "type": "string",
                      "name": "vaultName"
                    },
                    {
                      "type": "string",
                      "name": "certificateUrl"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": {
                      "sourceVault": {
                        "id": "[resourceId(parameters('vaultRg'), 'Microsoft.KeyVault/vaults', parameters('vaultName'))]"
                      },
                      "vaultCertificates": [
                        {
                          "certificateUrl": "[parameters('certificateUrl')]",
                          "certificateStore": "My"
                        }
                      ]
                    }
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "types-and-vars.bicep"
                    }
                  }
                },
                "certSettingsToVmTags": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/CertificateSettings",
                      "name": "certSettings"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": "[toObject(items(parameters('certSettings')), lambda('obj', variables('_1.certificateSettingsToTagsKeyMap')[lambdaVariables('obj').key]), lambda('obj', lambdaVariables('obj').value))]"
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "types-and-vars.bicep"
                    }
                  }
                }
              }
            }
          ],
          "parameters": {
            "hnName": {
              "type": "string"
            },
            "externalVNetRg": {
              "type": "string",
              "nullable": true
            },
            "externalVNetName": {
              "type": "string",
              "nullable": true
            },
            "subnetId": {
              "type": "string"
            },
            "enableAcceleratedNetworking": {
              "type": "bool"
            },
            "createPublicIp": {
              "type": "bool"
            },
            "lbName": {
              "type": "string",
              "nullable": true
            },
            "lbPoolName": {
              "type": "string",
              "nullable": true
            },
            "nsgName": {
              "type": "string",
              "nullable": true
            },
            "privateIp": {
              "type": "string",
              "nullable": true
            },
            "enableManagedIdentity": {
              "type": "bool"
            },
            "hnAvSetName": {
              "type": "string",
              "nullable": true
            },
            "hnVMSize": {
              "type": "string"
            },
            "adminUsername": {
              "type": "string"
            },
            "adminPassword": {
              "type": "securestring"
            },
            "certSettings": {
              "$ref": "#/definitions/CertificateSettings"
            },
            "hnImageRef": {
              "type": "object"
            },
            "hnDataDiskCount": {
              "type": "int"
            },
            "hnDataDiskSize": {
              "type": "int"
            },
            "hnOsDiskType": {
              "type": "string"
            },
            "hnDataDiskType": {
              "type": "string"
            },
            "logSettings": {
              "$ref": "#/definitions/AzureMonitorLogSettings",
              "nullable": true
            },
            "amaSettings": {
              "$ref": "#/definitions/AzureMonitorAgentSettings",
              "nullable": true
            },
            "clusterName": {
              "type": "string"
            },
            "installIBDriver": {
              "type": "bool"
            },
            "domainName": {
              "type": "string",
              "nullable": true
            },
            "domainOUPath": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "copy": [
              {
                "name": "hnDataDisks",
                "count": "[length(range(0, if(equals(parameters('hnDataDiskCount'), 0), 1, parameters('hnDataDiskCount'))))]",
                "input": {
                  "lun": "[range(0, if(equals(parameters('hnDataDiskCount'), 0), 1, parameters('hnDataDiskCount')))[copyIndex('hnDataDisks')]]",
                  "createOption": "Empty",
                  "diskSizeGB": "[parameters('hnDataDiskSize')]",
                  "managedDisk": {
                    "storageAccountType": "[variables('diskTypes')[parameters('hnDataDiskType')]]"
                  }
                }
              }
            ],
            "useExternalVNet": "[and(not(empty(parameters('externalVNetName'))), not(empty(parameters('externalVNetRg'))))]",
            "publicIpSuffix": "[uniqueString(resourceGroup().id)]",
            "nicSuffix": "[format('-nic-{0}', uniqueString(parameters('subnetId')))]",
            "vaultResourceGroup": "[parameters('certSettings').vaultResourceGroup]",
            "vaultName": "[parameters('certSettings').vaultName]",
            "certTags": "[__bicep.certSettingsToVmTags(parameters('certSettings'))]",
            "tags": "[union(variables('certTags'), if(empty(parameters('logSettings')), createObject(), parameters('logSettings')))]",
            "userMiResIdForLog": "[if(empty(parameters('logSettings')), null(), parameters('logSettings').LA_MiResId)]",
            "systemIdentity": {
              "type": "SystemAssigned"
            },
            "userIdentity": {
              "type": "UserAssigned",
              "userAssignedIdentities": {
                "[format('{0}', variables('userMiResIdForLog'))]": {}
              }
            },
            "systemAndUserIdentities": {
              "type": "SystemAssigned, UserAssigned",
              "userAssignedIdentities": {
                "[format('{0}', variables('userMiResIdForLog'))]": {}
              }
            },
            "identity": "[if(and(not(parameters('enableManagedIdentity')), empty(variables('userMiResIdForLog'))), null(), if(and(parameters('enableManagedIdentity'), not(empty(variables('userMiResIdForLog')))), variables('systemAndUserIdentities'), if(parameters('enableManagedIdentity'), variables('systemIdentity'), variables('userIdentity'))))]",
            "_1.certificateSettingsToTagsKeyMap": {
              "vaultResourceGroup": "KV_RG",
              "vaultName": "KV_Name",
              "url": "KV_CertUrl",
              "thumbprint": "KV_CertThumbprint"
            },
            "diskTypes": {
              "Standard_HDD": "Standard_LRS",
              "Standard_SSD": "StandardSSD_LRS",
              "Premium_SSD": "Premium_LRS"
            }
          },
          "resources": {
            "lb": {
              "condition": "[not(empty(parameters('lbName')))]",
              "existing": true,
              "type": "Microsoft.Network/loadBalancers",
              "apiVersion": "2023-11-01",
              "name": "[if(empty(parameters('lbName')), 'lbName', parameters('lbName'))]"
            },
            "nsg": {
              "condition": "[not(empty(parameters('nsgName')))]",
              "existing": true,
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2023-11-01",
              "name": "[if(empty(parameters('nsgName')), 'nsgName', parameters('nsgName'))]"
            },
            "avSet": {
              "condition": "[not(empty(parameters('hnAvSetName')))]",
              "existing": true,
              "type": "Microsoft.Compute/availabilitySets",
              "apiVersion": "2024-03-01",
              "name": "[if(empty(parameters('hnAvSetName')), 'hnAvSetName', parameters('hnAvSetName'))]"
            },
            "publicIp": {
              "condition": "[parameters('createPublicIp')]",
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}PublicIp', parameters('hnName'))]",
              "location": "[resourceGroup().location]",
              "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                  "domainNameLabel": "[toLower(format('{0}{1}', parameters('hnName'), variables('publicIpSuffix')))]"
                }
              }
            },
            "nic": {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}{1}', parameters('hnName'), variables('nicSuffix'))]",
              "location": "[resourceGroup().location]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "IPConfig",
                    "properties": {
                      "subnet": {
                        "id": "[parameters('subnetId')]"
                      },
                      "privateIPAllocationMethod": "[if(empty(parameters('privateIp')), 'Dynamic', 'Static')]",
                      "privateIPAddress": "[parameters('privateIp')]",
                      "publicIPAddress": "[if(not(parameters('createPublicIp')), null(), createObject('id', resourceId('Microsoft.Network/publicIPAddresses', format('{0}PublicIp', parameters('hnName')))))]",
                      "loadBalancerBackendAddressPools": "[if(empty(parameters('lbName')), null(), createArray(createObject('id', format('{0}/backendAddressPools/{1}', resourceId('Microsoft.Network/loadBalancers', if(empty(parameters('lbName')), 'lbName', parameters('lbName'))), parameters('lbPoolName')))))]",
                      "loadBalancerInboundNatRules": "[if(empty(parameters('lbName')), null(), createArray(createObject('id', format('{0}/inboundNatRules/RDP-{1}', resourceId('Microsoft.Network/loadBalancers', if(empty(parameters('lbName')), 'lbName', parameters('lbName'))), parameters('hnName')))))]"
                    }
                  }
                ],
                "networkSecurityGroup": "[if(empty(parameters('nsgName')), null(), createObject('id', resourceId('Microsoft.Network/networkSecurityGroups', if(empty(parameters('nsgName')), 'nsgName', parameters('nsgName')))))]",
                "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]"
              },
              "dependsOn": [
                "lb",
                "nsg",
                "publicIp"
              ]
            },
            "headNode": {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-03-01",
              "name": "[parameters('hnName')]",
              "location": "[resourceGroup().location]",
              "identity": "[variables('identity')]",
              "tags": "[variables('tags')]",
              "properties": {
                "availabilitySet": "[if(empty(parameters('hnAvSetName')), null(), createObject('id', resourceId('Microsoft.Compute/availabilitySets', if(empty(parameters('hnAvSetName')), 'hnAvSetName', parameters('hnAvSetName')))))]",
                "hardwareProfile": {
                  "vmSize": "[parameters('hnVMSize')]"
                },
                "osProfile": {
                  "computerName": "[parameters('hnName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]",
                  "windowsConfiguration": {
                    "enableAutomaticUpdates": false
                  },
                  "secrets": [
                    "[__bicep.certSecretForWindows(parameters('certSettings').vaultResourceGroup, parameters('certSettings').vaultName, parameters('certSettings').url)]"
                  ]
                },
                "storageProfile": {
                  "imageReference": "[parameters('hnImageRef')]",
                  "osDisk": {
                    "name": "[format('{0}-osdisk', parameters('hnName'))]",
                    "caching": "ReadOnly",
                    "createOption": "FromImage",
                    "managedDisk": {
                      "storageAccountType": "[variables('diskTypes')[parameters('hnOsDiskType')]]"
                    }
                  },
                  "dataDisks": "[if(equals(parameters('hnDataDiskCount'), 0), createArray(), variables('hnDataDisks'))]"
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}', parameters('hnName'), variables('nicSuffix')))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "avSet",
                "nic"
              ]
            },
            "contributorRoleAssignment": {
              "condition": "[parameters('enableManagedIdentity')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceGroup().id, parameters('clusterName'), parameters('hnName'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                "principalId": "[reference('headNode', '2023-03-01', 'full').identity.principalId]"
              },
              "dependsOn": [
                "headNode"
              ]
            },
            "ibDriver": {
              "condition": "[parameters('installIBDriver')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('hnName'), 'installInfiniBandDriver')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "publisher": "Microsoft.HpcCompute",
                "type": "InfiniBandDriverWindows",
                "typeHandlerVersion": "1.2",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "headNode"
              ]
            },
            "joinDomain": {
              "condition": "[not(empty(parameters('domainName')))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('hnName'), 'JoinADDomain')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "JsonADDomainExtension",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "Name": "[parameters('domainName')]",
                  "OUPath": "[parameters('domainOUPath')]",
                  "User": "[format('{0}\\{1}', parameters('domainName'), parameters('adminUsername'))]",
                  "NumberOfRetries": "50",
                  "RetryIntervalInMilliseconds": "10000",
                  "Restart": "true",
                  "Options": "3"
                },
                "protectedSettings": {
                  "Password": "[parameters('adminPassword')]"
                }
              },
              "dependsOn": [
                "headNode",
                "ibDriver"
              ]
            },
            "keyVaultRoleAssignment": {
              "condition": "[parameters('enableManagedIdentity')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('msiKeyVaultRoleAssignment{0}', parameters('hnName'))]",
              "resourceGroup": "[variables('vaultResourceGroup')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "keyVaultName": {
                    "value": "[variables('vaultName')]"
                  },
                  "principalId": {
                    "value": "[reference('headNode', '2023-03-01', 'full').identity.principalId]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "6100945709862251984"
                    }
                  },
                  "parameters": {
                    "keyVaultName": {
                      "type": "string"
                    },
                    "principalId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
                      "name": "[guid(resourceGroup().id, parameters('keyVaultName'), parameters('principalId'))]",
                      "properties": {
                        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
                        "principalId": "[parameters('principalId')]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "headNode"
              ]
            },
            "vnetRoleAssignment": {
              "condition": "[variables('useExternalVNet')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('msiVNetRoleAssignment{0}', parameters('hnName'))]",
              "resourceGroup": "[if(variables('useExternalVNet'), parameters('externalVNetRg'), 'externalVNetRg')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "vnetName": {
                    "value": "[parameters('externalVNetName')]"
                  },
                  "principalId": {
                    "value": "[reference('headNode', '2023-03-01', 'full').identity.principalId]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "8678648686144519404"
                    }
                  },
                  "parameters": {
                    "vnetName": {
                      "type": "string"
                    },
                    "principalId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('vnetName'))]",
                      "name": "[guid(resourceGroup().id, parameters('vnetName'), parameters('principalId'))]",
                      "properties": {
                        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                        "principalId": "[parameters('principalId')]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "headNode"
              ]
            },
            "ama": {
              "condition": "[not(empty(parameters('amaSettings')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-windowsAMA', parameters('hnName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "dcrResId": "[if(empty(parameters('amaSettings')), createObject('value', ''), createObject('value', parameters('amaSettings').dcrResId))]",
                  "userMiResId": "[if(empty(parameters('amaSettings')), createObject('value', ''), createObject('value', parameters('amaSettings').userMiResId))]",
                  "vmName": {
                    "value": "[parameters('hnName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "16249311328539426854"
                    }
                  },
                  "parameters": {
                    "vmName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "dcrResId": {
                      "type": "string"
                    },
                    "userMiResId": {
                      "type": "string"
                    },
                    "installDependencyAgent": {
                      "type": "bool",
                      "defaultValue": false
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Insights/dataCollectionRuleAssociations",
                      "apiVersion": "2019-11-01-preview",
                      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('vmName'))]",
                      "name": "[format('{0}-Dcr-Association', parameters('vmName'))]",
                      "properties": {
                        "description": "Association of data collection rule for VM Insights.",
                        "dataCollectionRuleId": "[parameters('dcrResId')]"
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-11-01",
                      "name": "[format('{0}/{1}', parameters('vmName'), 'AzureMonitorWindowsAgent')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitor",
                        "type": "AzureMonitorWindowsAgent",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true,
                        "settings": {
                          "authentication": {
                            "managedIdentity": {
                              "identifier-name": "mi_res_id",
                              "identifier-value": "[parameters('userMiResId')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), 'Microsoft.Insights/dataCollectionRuleAssociations', format('{0}-Dcr-Association', parameters('vmName')))]"
                      ]
                    },
                    {
                      "condition": "[parameters('installDependencyAgent')]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2024-03-01",
                      "name": "[format('{0}/{1}', parameters('vmName'), 'DependencyAgentWindows')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                        "type": "DependencyAgentWindows",
                        "typeHandlerVersion": "9.10",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "enableAMA": "true"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'AzureMonitorWindowsAgent')]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "headNode"
              ]
            }
          },
          "outputs": {
            "fqdn": {
              "type": "string",
              "value": "[if(parameters('createPublicIp'), reference('publicIp').dnsSettings.fqdn, '')]"
            }
          }
        }
      },
      "dependsOn": [
        "availabilitySet",
        "keyVault",
        "monitor",
        "nsg",
        "vnet"
      ]
    },
    "computeNodes": {
      "copy": {
        "name": "computeNodes",
        "count": "[length(range(0, parameters('computeNodeNumber')))]"
      },
      "condition": "[not(variables('useVmssForCN'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('create{0}{1}', variables('_computeNodeNamePrefix'), padLeft(string(range(0, parameters('computeNodeNumber'))[copyIndex()]), 3, '0'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "subnetId": {
            "value": "[format('{0}/subnets/{1}', reference('vnet').outputs.vNetId.value, variables('subnet1Name'))]"
          },
          "vmName": {
            "value": "[format('{0}{1}', variables('_computeNodeNamePrefix'), padLeft(string(range(0, parameters('computeNodeNumber'))[copyIndex()]), 3, '0'))]"
          },
          "vmSize": {
            "value": "[parameters('computeNodeVMSize')]"
          },
          "osDiskType": {
            "value": "[variables('diskTypes')[parameters('computeNodeOsDiskType')]]"
          },
          "dataDiskSizeInGB": {
            "value": "[parameters('computeNodeDataDiskSize')]"
          },
          "dataDiskCount": {
            "value": "[parameters('computeNodeDataDiskCount')]"
          },
          "dataDiskType": {
            "value": "[variables('diskTypes')[parameters('computeNodeDataDiskType')]]"
          },
          "imageReference": {
            "value": "[variables('computeNodeImageRef')]"
          },
          "imageOsPlatform": {
            "value": "windows"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "availabilitySetName": "[if(variables('createCNInAVSet'), createObject('value', variables('availabilitySetName')), createObject('value', ''))]",
          "vmPriority": {
            "value": "[variables('vmPriority')]"
          },
          "installRDMADriver": {
            "value": "[and(variables('cnRDMACapable'), variables('autoEnableInfiniBand'))]"
          },
          "enableAcceleratedNetworking": {
            "value": "[equals(parameters('enableAcceleratedNetworking'), 'Yes')]"
          },
          "certSettings": {
            "value": "[reference('keyVault').outputs.certSettings.value]"
          },
          "headNodeList": {
            "value": "[variables('_clusterName')]"
          },
          "joinDomain": {
            "value": false
          },
          "logSettings": "[if(variables('_enableAzureMonitor'), createObject('value', reference('monitor').outputs.logSettings.value), createObject('value', null()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "6775817623703107717"
            }
          },
          "definitions": {
            "AzureMonitorLogSettings": {
              "type": "object",
              "properties": {
                "LA_MiResId": {
                  "type": "string"
                },
                "LA_MiClientId": {
                  "type": "string"
                },
                "LA_DcrId": {
                  "type": "string"
                },
                "LA_DcrStream": {
                  "type": "string"
                },
                "LA_DceUrl": {
                  "type": "string"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "types-and-vars.bicep"
                }
              }
            },
            "CertificateSettings": {
              "type": "object",
              "properties": {
                "vaultResourceGroup": {
                  "type": "string"
                },
                "vaultName": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "thumbprint": {
                  "type": "string"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "types-and-vars.bicep"
                }
              }
            },
            "OsType": {
              "type": "string",
              "allowedValues": [
                "linux",
                "windows"
              ],
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "types-and-vars.bicep"
                }
              }
            }
          },
          "functions": [
            {
              "namespace": "__bicep",
              "members": {
                "certSecretForLinux": {
                  "parameters": [
                    {
                      "type": "string",
                      "name": "vaultRg"
                    },
                    {
                      "type": "string",
                      "name": "vaultName"
                    },
                    {
                      "type": "string",
                      "name": "certificateUrl"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": {
                      "sourceVault": {
                        "id": "[resourceId(parameters('vaultRg'), 'Microsoft.KeyVault/vaults', parameters('vaultName'))]"
                      },
                      "vaultCertificates": [
                        {
                          "certificateUrl": "[parameters('certificateUrl')]"
                        }
                      ]
                    }
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "types-and-vars.bicep"
                    }
                  }
                },
                "certSecretForWindows": {
                  "parameters": [
                    {
                      "type": "string",
                      "name": "vaultRg"
                    },
                    {
                      "type": "string",
                      "name": "vaultName"
                    },
                    {
                      "type": "string",
                      "name": "certificateUrl"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": {
                      "sourceVault": {
                        "id": "[resourceId(parameters('vaultRg'), 'Microsoft.KeyVault/vaults', parameters('vaultName'))]"
                      },
                      "vaultCertificates": [
                        {
                          "certificateUrl": "[parameters('certificateUrl')]",
                          "certificateStore": "My"
                        }
                      ]
                    }
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "types-and-vars.bicep"
                    }
                  }
                }
              }
            }
          ],
          "parameters": {
            "subnetId": {
              "type": "string",
              "metadata": {
                "description": "The Id of the subnet in which the node is created"
              }
            },
            "vmName": {
              "type": "string",
              "metadata": {
                "description": "The VM name"
              }
            },
            "vmSize": {
              "type": "string",
              "metadata": {
                "description": "The VM role size"
              }
            },
            "osDiskType": {
              "type": "string",
              "defaultValue": "StandardSSD_LRS",
              "metadata": {
                "description": "The OS disk type of the VM"
              }
            },
            "dataDiskSizeInGB": {
              "type": "int",
              "defaultValue": 128,
              "metadata": {
                "description": "The size in GB of each data disk that is attached to the VM."
              }
            },
            "dataDiskCount": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "The count of data disks attached to the VM."
              }
            },
            "dataDiskType": {
              "type": "string",
              "defaultValue": "Standard_LRS",
              "metadata": {
                "description": "The data disk type of the VM"
              }
            },
            "imageReference": {
              "type": "object",
              "metadata": {
                "description": "The image reference"
              }
            },
            "imageOsPlatform": {
              "$ref": "#/definitions/OsType",
              "metadata": {
                "description": "The VM image OS platform for the compute nodes"
              }
            },
            "adminUsername": {
              "type": "string",
              "metadata": {
                "description": "The user name of the administrator"
              }
            },
            "adminPassword": {
              "type": "securestring",
              "metadata": {
                "description": "The password of the administrator"
              }
            },
            "sshPublicKey": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "If specified, the SSH Key for the administrator, only valid for Linux Virtual Machine."
              }
            },
            "availabilitySetName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The availability set name to join if specified, it cannot be specified together with 'availabilityZone'."
              }
            },
            "availabilityZone": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The availability zone where the VM is created if specified, it cannot be specified together with 'availabilitySetName'."
              }
            },
            "osDiskSizeInGB": {
              "type": "int",
              "defaultValue": 128,
              "minValue": 30,
              "maxValue": 1023,
              "metadata": {
                "description": "The os disk size in GB"
              }
            },
            "vmPriority": {
              "type": "string",
              "defaultValue": "Regular",
              "metadata": {
                "description": "Specify the priority of the virtual machines in the scale set, Regular or Low."
              }
            },
            "installRDMADriver": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specify whether to install RDMA driver"
              }
            },
            "enableAutomaticUpdates": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specify whether the VM is enabled for automatic updates, not used for Linux node"
              }
            },
            "enableAcceleratedNetworking": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specify whether to create the Azure VM with accelerated networking"
              }
            },
            "certSettings": {
              "$ref": "#/definitions/CertificateSettings",
              "metadata": {
                "description": "The certificate that shall be installed on the VM"
              }
            },
            "headNodeList": {
              "type": "string",
              "metadata": {
                "description": "The head node list"
              }
            },
            "joinDomain": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specify whether this node need to join domain."
              }
            },
            "domainName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The fully qualified domain name (FQDN) for the domain forest in which the cluster is created."
              }
            },
            "domainOUPath": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The organizational unit (OU) in the domain, used only when 'domainName' is specified."
              }
            },
            "userAssignedIdentity": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional, specify the resource ID of the user assigned identity to associate with the virtual machine in the form: /subscriptions/&lt;SubscriptionId&gt;/resourceGroups/&lt;ResourceGroupName&gt;/providers/Microsoft.ManagedIdentity/userAssignedIdentities/&lt;identityName&gt;"
              }
            },
            "dnsServers": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The DNS servers in order, if not configured, the DNS servers configured in the virtual network will be used."
              }
            },
            "licenseType": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Specifies the license type for the virtual machines. Use 'Windows_Server' for Azure Hybrid Benefit."
              }
            },
            "logSettings": {
              "$ref": "#/definitions/AzureMonitorLogSettings",
              "nullable": true,
              "metadata": {
                "description": "Azure Monitor log settings"
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "dataDisks",
                "count": "[length(range(0, if(equals(parameters('dataDiskCount'), 0), 1, parameters('dataDiskCount'))))]",
                "input": {
                  "lun": "[range(0, if(equals(parameters('dataDiskCount'), 0), 1, parameters('dataDiskCount')))[copyIndex('dataDisks')]]",
                  "name": "[format('{0}-datadisk-{1}', parameters('vmName'), range(0, if(equals(parameters('dataDiskCount'), 0), 1, parameters('dataDiskCount')))[copyIndex('dataDisks')])]",
                  "createOption": "Empty",
                  "diskSizeGB": "[parameters('dataDiskSizeInGB')]",
                  "managedDisk": {
                    "storageAccountType": "[parameters('dataDiskType')]"
                  }
                }
              }
            ],
            "tags": "[if(empty(parameters('logSettings')), createObject(), parameters('logSettings'))]",
            "userMiResIdForLog": "[if(empty(parameters('logSettings')), '', parameters('logSettings').LA_MiResId)]",
            "_userAssignedIdentity": "[trim(parameters('userAssignedIdentity'))]",
            "_userMiResIdForLog": "[trim(variables('userMiResIdForLog'))]",
            "noIdentity": "[and(empty(variables('_userAssignedIdentity')), empty(variables('_userMiResIdForLog')))]",
            "userIdentity": {
              "type": "UserAssigned",
              "userAssignedIdentities": {
                "[format('{0}', variables('_userAssignedIdentity'))]": {}
              }
            },
            "userIdentityForLog": {
              "type": "UserAssigned",
              "userAssignedIdentities": {
                "[format('{0}', variables('_userMiResIdForLog'))]": {}
              }
            },
            "bothIdentities": "[if(variables('noIdentity'), null(), createObject('type', 'UserAssigned', 'userAssignedIdentities', createObject(format('{0}', variables('_userAssignedIdentity')), createObject(), format('{0}', variables('_userMiResIdForLog')), createObject())))]",
            "identity": "[if(variables('noIdentity'), null(), if(and(not(empty(variables('_userAssignedIdentity'))), not(empty(variables('_userMiResIdForLog')))), variables('bothIdentities'), if(not(empty(variables('_userAssignedIdentity'))), variables('userIdentity'), variables('userIdentityForLog'))))]",
            "nicName": "[format('{0}-nic-{1}', parameters('vmName'), uniqueString(parameters('subnetId')))]",
            "isWindowsOS": "[equals(toLower(parameters('imageOsPlatform')), 'windows')]",
            "trimmedSSHPublicKey": "[trim(parameters('sshPublicKey'))]",
            "windowsConfiguration": {
              "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]"
            },
            "emptyArray": [],
            "availabilitySet": {
              "id": "[resourceId('Microsoft.Compute/availabilitySets', trim(parameters('availabilitySetName')))]"
            },
            "availabilityZones": [
              "[trim(parameters('availabilityZone'))]"
            ],
            "dnsSettings": {
              "dnsServers": "[parameters('dnsServers')]"
            },
            "protectedSettings": {
              "userPassword": "[parameters('adminPassword')]"
            },
            "sshKeyConfig": {
              "publicKeys": [
                {
                  "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('adminUsername'))]",
                  "keyData": "[variables('trimmedSSHPublicKey')]"
                }
              ]
            },
            "linuxConfiguration": {
              "disablePasswordAuthentication": "[not(empty(variables('trimmedSSHPublicKey')))]",
              "ssh": "[if(empty(variables('trimmedSSHPublicKey')), null(), variables('sshKeyConfig'))]"
            }
          },
          "resources": {
            "nic": {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2019-04-01",
              "name": "[variables('nicName')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "IPConfig",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetId')]"
                      }
                    }
                  }
                ],
                "dnsSettings": "[if(empty(parameters('dnsServers')), null(), variables('dnsSettings'))]",
                "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]"
              }
            },
            "vm": {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2019-03-01",
              "name": "[parameters('vmName')]",
              "location": "[resourceGroup().location]",
              "identity": "[variables('identity')]",
              "tags": "[variables('tags')]",
              "properties": {
                "availabilitySet": "[if(empty(trim(parameters('availabilitySetName'))), null(), variables('availabilitySet'))]",
                "hardwareProfile": {
                  "vmSize": "[parameters('vmSize')]"
                },
                "osProfile": {
                  "computerName": "[parameters('vmName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]",
                  "linuxConfiguration": "[if(variables('isWindowsOS'), null(), variables('linuxConfiguration'))]",
                  "windowsConfiguration": "[if(variables('isWindowsOS'), variables('windowsConfiguration'), null())]",
                  "secrets": [
                    "[if(equals(parameters('imageOsPlatform'), 'windows'), __bicep.certSecretForWindows(parameters('certSettings').vaultResourceGroup, parameters('certSettings').vaultName, parameters('certSettings').url), __bicep.certSecretForLinux(parameters('certSettings').vaultResourceGroup, parameters('certSettings').vaultName, parameters('certSettings').url))]"
                  ]
                },
                "licenseType": "[if(equals(parameters('licenseType'), ''), null(), parameters('licenseType'))]",
                "storageProfile": {
                  "imageReference": "[parameters('imageReference')]",
                  "osDisk": {
                    "name": "[format('{0}-osdisk', parameters('vmName'))]",
                    "caching": "ReadOnly",
                    "createOption": "FromImage",
                    "diskSizeGB": "[parameters('osDiskSizeInGB')]",
                    "managedDisk": {
                      "storageAccountType": "[parameters('osDiskType')]"
                    }
                  },
                  "dataDisks": "[if(equals(parameters('dataDiskCount'), 0), variables('emptyArray'), variables('dataDisks'))]"
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
                    }
                  ]
                },
                "priority": "[parameters('vmPriority')]",
                "evictionPolicy": "[if(equals(parameters('vmPriority'), 'Regular'), null(), 'Deallocate')]"
              },
              "zones": "[if(empty(trim(parameters('availabilityZone'))), variables('emptyArray'), variables('availabilityZones'))]",
              "dependsOn": [
                "nic"
              ]
            },
            "windowsIBDriver": {
              "condition": "[and(variables('isWindowsOS'), parameters('installRDMADriver'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2019-03-01",
              "name": "[format('{0}/{1}', parameters('vmName'), 'installInfiniBandDriverWindows')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "publisher": "Microsoft.HpcCompute",
                "type": "InfiniBandDriverWindows",
                "typeHandlerVersion": "1.5",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "vm"
              ]
            },
            "windowsNodeAgent": {
              "condition": "[variables('isWindowsOS')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2019-03-01",
              "name": "[format('{0}/{1}', parameters('vmName'), 'configHpcComputeNode')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "publisher": "Microsoft.HpcPack",
                "type": "HPCComputeNode",
                "typeHandlerVersion": "16.2",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "domainName": "[parameters('domainName')]",
                  "ouPath": "[parameters('domainOUPath')]",
                  "userName": "[parameters('adminUsername')]",
                  "headNodeList": "[parameters('headNodeList')]",
                  "certThumbprint": "[parameters('certSettings').thumbprint]",
                  "nonDomainRole": "[not(parameters('joinDomain'))]"
                },
                "protectedSettings": "[if(parameters('joinDomain'), variables('protectedSettings'), null())]"
              },
              "dependsOn": [
                "vm",
                "windowsIBDriver"
              ]
            },
            "linuxIBDriver": {
              "condition": "[and(not(variables('isWindowsOS')), parameters('installRDMADriver'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2019-03-01",
              "name": "[format('{0}/{1}', parameters('vmName'), 'installInfiniBandDriverLinux')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "publisher": "Microsoft.HpcCompute",
                "type": "InfiniBandDriverLinux",
                "typeHandlerVersion": "1.2",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "vm"
              ]
            },
            "linuxNodeAgent": {
              "condition": "[not(variables('isWindowsOS'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2019-03-01",
              "name": "[format('{0}/{1}', parameters('vmName'), 'installHPCNodeAgent')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "publisher": "Microsoft.HpcPack",
                "type": "LinuxNodeAgent2016U1",
                "typeHandlerVersion": "16.2",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "ClusterConnectionString": "[parameters('headNodeList')]",
                  "SSLThumbprint": "[parameters('certSettings').thumbprint]",
                  "DomainName": "[parameters('domainName')]"
                }
              },
              "dependsOn": [
                "linuxIBDriver",
                "vm"
              ]
            }
          }
        }
      },
      "dependsOn": [
        "availabilitySet",
        "headNode",
        "keyVault",
        "monitor",
        "vnet"
      ]
    },
    "computeVmss": {
      "condition": "[and(greater(parameters('computeNodeNumber'), 0), variables('useVmssForCN'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('create{0}', variables('computeVmssName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "subnetId": {
            "value": "[format('{0}/subnets/{1}', reference('vnet').outputs.vNetId.value, variables('subnet1Name'))]"
          },
          "vmssName": {
            "value": "[variables('computeVmssName')]"
          },
          "vmNumber": {
            "value": "[parameters('computeNodeNumber')]"
          },
          "vmSize": {
            "value": "[parameters('computeNodeVMSize')]"
          },
          "osDiskType": {
            "value": "[variables('diskTypes')[parameters('computeNodeOsDiskType')]]"
          },
          "dataDiskSizeInGB": {
            "value": "[parameters('computeNodeDataDiskSize')]"
          },
          "dataDiskCount": {
            "value": "[parameters('computeNodeDataDiskCount')]"
          },
          "dataDiskType": {
            "value": "[variables('diskTypes')[parameters('computeNodeDataDiskType')]]"
          },
          "imageReference": {
            "value": "[variables('computeNodeImageRef')]"
          },
          "imageOsPlatform": {
            "value": "windows"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "singlePlacementGroup": {
            "value": "[variables('vmssSinglePlacementGroup')]"
          },
          "vmPriority": {
            "value": "[variables('vmPriority')]"
          },
          "installRDMADriver": {
            "value": "[and(variables('cnRDMACapable'), variables('autoEnableInfiniBand'))]"
          },
          "enableAcceleratedNetworking": {
            "value": "[equals(parameters('enableAcceleratedNetworking'), 'Yes')]"
          },
          "certSettings": {
            "value": "[reference('keyVault').outputs.certSettings.value]"
          },
          "headNodeList": {
            "value": "[variables('_clusterName')]"
          },
          "joinDomain": {
            "value": false
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "6213467785962806661"
            }
          },
          "definitions": {
            "CertificateSettings": {
              "type": "object",
              "properties": {
                "vaultResourceGroup": {
                  "type": "string"
                },
                "vaultName": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "thumbprint": {
                  "type": "string"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "types-and-vars.bicep"
                }
              }
            },
            "OsType": {
              "type": "string",
              "allowedValues": [
                "linux",
                "windows"
              ],
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "types-and-vars.bicep"
                }
              }
            }
          },
          "functions": [
            {
              "namespace": "__bicep",
              "members": {
                "certSecretForLinux": {
                  "parameters": [
                    {
                      "type": "string",
                      "name": "vaultRg"
                    },
                    {
                      "type": "string",
                      "name": "vaultName"
                    },
                    {
                      "type": "string",
                      "name": "certificateUrl"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": {
                      "sourceVault": {
                        "id": "[resourceId(parameters('vaultRg'), 'Microsoft.KeyVault/vaults', parameters('vaultName'))]"
                      },
                      "vaultCertificates": [
                        {
                          "certificateUrl": "[parameters('certificateUrl')]"
                        }
                      ]
                    }
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "types-and-vars.bicep"
                    }
                  }
                },
                "certSecretForWindows": {
                  "parameters": [
                    {
                      "type": "string",
                      "name": "vaultRg"
                    },
                    {
                      "type": "string",
                      "name": "vaultName"
                    },
                    {
                      "type": "string",
                      "name": "certificateUrl"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": {
                      "sourceVault": {
                        "id": "[resourceId(parameters('vaultRg'), 'Microsoft.KeyVault/vaults', parameters('vaultName'))]"
                      },
                      "vaultCertificates": [
                        {
                          "certificateUrl": "[parameters('certificateUrl')]",
                          "certificateStore": "My"
                        }
                      ]
                    }
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "types-and-vars.bicep"
                    }
                  }
                }
              }
            }
          ],
          "parameters": {
            "subnetId": {
              "type": "string",
              "metadata": {
                "description": "The Id of the subnet in which the VMSS instances are created"
              }
            },
            "vmssName": {
              "type": "string",
              "metadata": {
                "description": "The VMSS name as well as the VM computer name prefix"
              }
            },
            "vmNumber": {
              "type": "int",
              "metadata": {
                "description": "The number of VMs in the VMSS."
              }
            },
            "vmSize": {
              "type": "string",
              "metadata": {
                "description": "The VM role size"
              }
            },
            "osDiskType": {
              "type": "string",
              "defaultValue": "StandardSSD_LRS",
              "metadata": {
                "description": "The OS disk type of the VM"
              }
            },
            "dataDiskSizeInGB": {
              "type": "int",
              "defaultValue": 128,
              "metadata": {
                "description": "The size in GB of each data disk that is attached to the VM."
              }
            },
            "dataDiskCount": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "The count of data disks attached to the VM."
              }
            },
            "dataDiskType": {
              "type": "string",
              "defaultValue": "Standard_LRS",
              "metadata": {
                "description": "The data disk type of the VM"
              }
            },
            "imageReference": {
              "type": "object",
              "metadata": {
                "description": "The image reference"
              }
            },
            "imageOsPlatform": {
              "$ref": "#/definitions/OsType",
              "metadata": {
                "description": "The VM image OS platform for the compute nodes"
              }
            },
            "adminUsername": {
              "type": "string",
              "metadata": {
                "description": "The user name of the administrator"
              }
            },
            "adminPassword": {
              "type": "securestring",
              "metadata": {
                "description": "The password of the administrator"
              }
            },
            "sshPublicKey": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "If specified, the SSH Key for the administrator, only valid for Linux Virtual Machine."
              }
            },
            "availabilityZones": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The availability zones where the VM instances are created if specified."
              }
            },
            "osDiskSizeInGB": {
              "type": "int",
              "defaultValue": 128,
              "minValue": 30,
              "maxValue": 1023,
              "metadata": {
                "description": "The os disk size in GB"
              }
            },
            "singlePlacementGroup": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Specify whether the scale set is limited to a single placement group"
              }
            },
            "vmPriority": {
              "type": "string",
              "defaultValue": "Regular",
              "metadata": {
                "description": "Specify the priority of the virtual machines in the scale set, Regular or Low."
              }
            },
            "installRDMADriver": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specify whether to install RDMA driver"
              }
            },
            "enableAutomaticUpdates": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specify whether the VM is enabled for automatic updates, not used for Linux node"
              }
            },
            "enableAcceleratedNetworking": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specify whether to create the Azure VM with accelerated networking"
              }
            },
            "certSettings": {
              "$ref": "#/definitions/CertificateSettings",
              "metadata": {
                "description": "The certificate that shall be installed on the VM"
              }
            },
            "headNodeList": {
              "type": "string",
              "metadata": {
                "description": "The head node list"
              }
            },
            "joinDomain": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specify whether this node need to join domain."
              }
            },
            "domainName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The fully qualified domain name (FQDN) for the domain forest in which the cluster is created."
              }
            },
            "domainOUPath": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The organizational unit (OU) in the domain, used only when 'domainName' is specified."
              }
            },
            "userAssignedIdentity": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional, specify the resource ID of the user assigned identity to associate with the virtual machine in the form: /subscriptions/&lt;SubscriptionId&gt;/resourceGroups/&lt;ResourceGroupName&gt;/providers/Microsoft.ManagedIdentity/userAssignedIdentities/&lt;identityName&gt;"
              }
            },
            "dnsServers": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The DNS servers in order, if not configured, the DNS servers configured in the virtual network will be used."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "dataDisks",
                "count": "[length(range(0, if(equals(parameters('dataDiskCount'), 0), 1, parameters('dataDiskCount'))))]",
                "input": {
                  "lun": "[range(0, if(equals(parameters('dataDiskCount'), 0), 1, parameters('dataDiskCount')))[copyIndex('dataDisks')]]",
                  "createOption": "Empty",
                  "diskSizeGB": "[parameters('dataDiskSizeInGB')]",
                  "managedDisk": {
                    "storageAccountType": "[parameters('dataDiskType')]"
                  }
                }
              }
            ],
            "userAssignedIdentityObject": {
              "type": "UserAssigned",
              "userAssignedIdentities": {
                "[format('{0}', parameters('userAssignedIdentity'))]": {}
              }
            },
            "isWindowsOS": "[equals(toLower(parameters('imageOsPlatform')), 'windows')]",
            "trimmedSSHPublicKey": "[trim(parameters('sshPublicKey'))]",
            "windowsConfiguration": {
              "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]"
            },
            "emptyArray": [],
            "dnsSettings": {
              "dnsServers": "[parameters('dnsServers')]"
            },
            "protectedSettings": {
              "userPassword": "[parameters('adminPassword')]"
            },
            "sshKeyConfig": {
              "publicKeys": [
                {
                  "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('adminUsername'))]",
                  "keyData": "[variables('trimmedSSHPublicKey')]"
                }
              ]
            },
            "linuxConfiguration": {
              "disablePasswordAuthentication": "[not(empty(variables('trimmedSSHPublicKey')))]",
              "ssh": "[if(empty(variables('trimmedSSHPublicKey')), null(), variables('sshKeyConfig'))]"
            },
            "lnxBasicExtension": [
              {
                "name": "installHPCNodeAgent",
                "properties": {
                  "provisionAfterExtensions": "[if(parameters('installRDMADriver'), array('installRDMADriver'), variables('emptyArray'))]",
                  "publisher": "Microsoft.HpcPack",
                  "type": "LinuxNodeAgent2016U1",
                  "typeHandlerVersion": "16.2",
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                    "ClusterConnectionString": "[parameters('headNodeList')]",
                    "SSLThumbprint": "[parameters('certSettings').thumbprint]",
                    "DomainName": "[parameters('domainName')]"
                  }
                }
              }
            ],
            "winBasicExtension": [
              {
                "name": "configHpcComputeNode",
                "properties": {
                  "provisionAfterExtensions": "[if(parameters('installRDMADriver'), array('installRDMADriver'), variables('emptyArray'))]",
                  "publisher": "Microsoft.HpcPack",
                  "type": "HPCComputeNode",
                  "typeHandlerVersion": "16.2",
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                    "domainName": "[parameters('domainName')]",
                    "ouPath": "[parameters('domainOUPath')]",
                    "userName": "[parameters('adminUsername')]",
                    "headNodeList": "[parameters('headNodeList')]",
                    "certThumbprint": "[parameters('certSettings').thumbprint]",
                    "nonDomainRole": "[not(parameters('joinDomain'))]"
                  },
                  "protectedSettings": "[if(parameters('joinDomain'), variables('protectedSettings'), null())]"
                }
              }
            ],
            "hpcWinDriverExtension": {
              "name": "installRDMADriver",
              "properties": {
                "publisher": "Microsoft.HpcCompute",
                "type": "InfiniBandDriverWindows",
                "typeHandlerVersion": "1.5",
                "autoUpgradeMinorVersion": true,
                "settings": {}
              }
            },
            "hpcLinuxDriverExtension": {
              "name": "installRDMADriver",
              "properties": {
                "publisher": "Microsoft.HpcCompute",
                "type": "InfiniBandDriverLinux",
                "typeHandlerVersion": "1.2",
                "autoUpgradeMinorVersion": true,
                "settings": {}
              }
            },
            "basicVmssExtension": "[if(variables('isWindowsOS'), variables('winBasicExtension'), variables('lnxBasicExtension'))]",
            "hpcDriverExtension": "[if(variables('isWindowsOS'), variables('hpcWinDriverExtension'), variables('hpcLinuxDriverExtension'))]",
            "vmssExtensions": "[if(parameters('installRDMADriver'), concat(variables('basicVmssExtension'), array(variables('hpcDriverExtension'))), variables('basicVmssExtension'))]"
          },
          "resources": {
            "vmss": {
              "type": "Microsoft.Compute/virtualMachineScaleSets",
              "apiVersion": "2019-03-01",
              "name": "[parameters('vmssName')]",
              "location": "[resourceGroup().location]",
              "sku": {
                "name": "[parameters('vmSize')]",
                "tier": "Standard",
                "capacity": "[parameters('vmNumber')]"
              },
              "identity": "[if(empty(trim(parameters('userAssignedIdentity'))), null(), variables('userAssignedIdentityObject'))]",
              "properties": {
                "singlePlacementGroup": "[parameters('singlePlacementGroup')]",
                "overprovision": false,
                "upgradePolicy": {
                  "mode": "Manual"
                },
                "virtualMachineProfile": {
                  "storageProfile": {
                    "imageReference": "[parameters('imageReference')]",
                    "osDisk": {
                      "caching": "ReadOnly",
                      "createOption": "FromImage",
                      "diskSizeGB": "[parameters('osDiskSizeInGB')]",
                      "managedDisk": {
                        "storageAccountType": "[parameters('osDiskType')]"
                      }
                    },
                    "dataDisks": "[if(equals(parameters('dataDiskCount'), 0), variables('emptyArray'), variables('dataDisks'))]"
                  },
                  "osProfile": {
                    "computerNamePrefix": "[parameters('vmssName')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]",
                    "linuxConfiguration": "[if(variables('isWindowsOS'), null(), variables('linuxConfiguration'))]",
                    "windowsConfiguration": "[if(variables('isWindowsOS'), variables('windowsConfiguration'), null())]",
                    "secrets": [
                      "[if(equals(parameters('imageOsPlatform'), 'windows'), __bicep.certSecretForWindows(parameters('certSettings').vaultResourceGroup, parameters('certSettings').vaultName, parameters('certSettings').url), __bicep.certSecretForLinux(parameters('certSettings').vaultResourceGroup, parameters('certSettings').vaultName, parameters('certSettings').url))]"
                    ]
                  },
                  "networkProfile": {
                    "networkInterfaceConfigurations": [
                      {
                        "name": "nicconfig1",
                        "properties": {
                          "primary": true,
                          "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]",
                          "dnsSettings": "[if(empty(parameters('dnsServers')), null(), variables('dnsSettings'))]",
                          "ipConfigurations": [
                            {
                              "name": "ipconfig1",
                              "properties": {
                                "subnet": {
                                  "id": "[parameters('subnetId')]"
                                }
                              }
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "extensionProfile": {
                    "extensions": "[variables('vmssExtensions')]"
                  },
                  "priority": "[parameters('vmPriority')]",
                  "evictionPolicy": "[if(equals(parameters('vmPriority'), 'Regular'), null(), 'Deallocate')]"
                }
              },
              "zones": "[parameters('availabilityZones')]"
            }
          }
        }
      },
      "dependsOn": [
        "headNode",
        "keyVault",
        "vnet"
      ]
    }
  },
  "outputs": {
    "clusterDNSName": {
      "type": "string",
      "value": "[if(equals(parameters('createPublicIPAddressForHeadNode'), 'No'), '', reference('headNode').outputs.fqdn.value)]"
    }
  }
}