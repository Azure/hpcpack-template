{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.30.23.60470",
      "templateHash": "14707602770361484287"
    }
  },
  "definitions": {
    "DiskCount": {
      "type": "int",
      "allowedValues": [
        0,
        1,
        2,
        4,
        8
      ],
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "shared/types-and-vars.bicep"
        }
      }
    },
    "DiskSizeInGB": {
      "type": "int",
      "allowedValues": [
        1024,
        128,
        2048,
        256,
        32,
        4096,
        512,
        64
      ],
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "shared/types-and-vars.bicep"
        }
      }
    },
    "DiskType": {
      "type": "string",
      "allowedValues": [
        "Premium_SSD",
        "Standard_HDD",
        "Standard_SSD"
      ],
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "shared/types-and-vars.bicep"
        }
      }
    },
    "WindowsComputeNodeImage": {
      "type": "string",
      "allowedValues": [
        "CustomImage",
        "WindowsServer2012",
        "WindowsServer2012R2",
        "WindowsServer2012R2WithExcel",
        "WindowsServer2012R2_Gen2",
        "WindowsServer2012_Gen2",
        "WindowsServer2016",
        "WindowsServer2016WithExcel",
        "WindowsServer2016_Gen2",
        "WindowsServer2019",
        "WindowsServer2019_Gen2",
        "WindowsServer2022",
        "WindowsServer2022_Gen2"
      ],
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "shared/types-and-vars.bicep"
        }
      }
    },
    "YesOrNo": {
      "type": "string",
      "allowedValues": [
        "No",
        "Yes"
      ],
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "shared/types-and-vars.bicep"
        }
      }
    },
    "YesOrNoOrAuto": {
      "type": "string",
      "allowedValues": [
        "Auto",
        "No",
        "Yes"
      ],
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "shared/types-and-vars.bicep"
        }
      }
    }
  },
  "parameters": {
    "computeNodeNamePrefix": {
      "type": "string",
      "minLength": 1,
      "maxLength": 12,
      "metadata": {
        "description": "The name prefix of the compute nodes. It must be no more than 12 characters, begin with a letter, and contain only letters, numbers; The compute node name pattern is '&lt;NamePrefix&gt;&lt;index&gt;', the width of index is 3 characters, make sure the compute node names are unique in the domain forest."
      }
    },
    "computeNodeNameStartIndex": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "The start index of the compute node name series. For example, computeNodeNamePrefix is specified as 'IaaSCN', and computeNodeNameStartIndex is specified as 2, the compute node names will be 'IaaSCN002', 'IaaSCN003', ..."
      }
    },
    "computeNodeNumber": {
      "type": "int",
      "defaultValue": 10,
      "minValue": 1,
      "maxValue": 50,
      "metadata": {
        "description": "The number of the compute nodes."
      }
    },
    "computeNodeImage": {
      "$ref": "#/definitions/WindowsComputeNodeImage",
      "defaultValue": "WindowsServer2019",
      "metadata": {
        "description": "The VM image of the compute nodes."
      }
    },
    "computeNodeImageResourceId": {
      "type": "string",
      "defaultValue": "/subscriptions/xxx/resourceGroups/xxx/providers/Microsoft.Compute/images/xxx",
      "metadata": {
        "description": "Specify only when 'CustomImage' selected for computeNodeImage. The resource Id of the compute node image, it can be a managed VM image in your own subscription (/subscriptions/&lt;SubscriptionId&gt;/resourceGroups/&lt;ResourceGroupName&gt;/providers/Microsoft.Compute/images/&lt;ImageName&gt;) or a shared VM image from Azure Shared Image Gallery (/subscriptions/&lt;SubscriptionId&gt;/resourceGroups/&lt;ResourceGroupName&gt;/providers/Microsoft.Compute/galleries/&lt;GalleryName&gt;/images/&lt;ImageName&gt;/versions/&lt;ImageVersion&gt;)."
      }
    },
    "computeNodeVMSize": {
      "type": "string",
      "defaultValue": "Standard_D3_v2",
      "metadata": {
        "description": "The VM size of the compute nodes, all available VM sizes in Azure can be found at <a href='https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-windows-sizes' target='_blank'>Azure VM Sizes</a>. Note that some VM sizes in the list are only available in some particular locations. Please check the availability and the price of the VM sizes at https://azure.microsoft.com/pricing/details/virtual-machines/windows/ before deployment."
      }
    },
    "computeNodeOsDiskType": {
      "$ref": "#/definitions/DiskType",
      "defaultValue": "Standard_HDD",
      "metadata": {
        "description": "The disk type of compute node VM. Note that Premium_SSD only supports some VM sizes, see <a href='https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-windows-sizes' target='_blank'>Azure VM Sizes</a>"
      }
    },
    "dataDiskCount": {
      "$ref": "#/definitions/DiskCount",
      "defaultValue": 0,
      "metadata": {
        "description": "The number of data disk(s) for each compute node."
      }
    },
    "dataDiskSizeInGB": {
      "$ref": "#/definitions/DiskSizeInGB",
      "defaultValue": 32,
      "metadata": {
        "description": "The size in GB of each data disk that is attached to the VM."
      }
    },
    "dataDiskType": {
      "$ref": "#/definitions/DiskType",
      "defaultValue": "Standard_HDD",
      "metadata": {
        "description": "The data disk type. Note that Premium_SSD only supports some VM sizes, see https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-windows-sizes."
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "The administrator user name, for example 'johnlee'. It must be a domain user account if you want to join the compute nodes to AD domain."
      }
    },
    "adminUserPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The administrator user password."
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "The existing virtual network in which all VMs of the HPC cluster will be created."
      }
    },
    "virtualNetworkResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "The resource group in which the existing virtual network was created."
      }
    },
    "subnetName": {
      "type": "string",
      "metadata": {
        "description": "The existing subnet in which all VMs of the HPC cluster will be created."
      }
    },
    "availabilitySetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The availability set name if you want to create the compute nodes in an availability set, it cannot be specified together with 'availabilityZones'. For RDMA capable VMs, you shall specify this parameter. If you want to create the compute nodes in an existing availabity set, it must be in the same resource group which you selected for this deployment."
      }
    },
    "availabilityZones": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The availability zones if you want to create the compute nodes in availability zones, it cannot be specified together with 'availabilitySetName'. You can specify multiple zones separated with ',', for example: '1,2,3'."
      }
    },
    "enableAcceleratedNetworking": {
      "$ref": "#/definitions/YesOrNo",
      "defaultValue": "No",
      "metadata": {
        "description": "Specify whether to create the Azure VMs with accelerated networking or not. Note accelerated networking is supported only for some VM sizes. More information about accelerated networking please see https://docs.microsoft.com/en-us/azure/virtual-network/create-vm-accelerated-networking-powershell."
      }
    },
    "headNodeList": {
      "type": "string",
      "metadata": {
        "description": "The head node hostname list separated by comma(','), for example, 'myheadnode', or 'myheadnode1,myheadnode2,myheadnode3'. Note, do NOT put any space around the hostname"
      }
    },
    "domainName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specify the fully qualified domain name (FQDN) for the existing domain forest if your HPC cluster is domain joined, for example 'hpc.cluster'."
      }
    },
    "domainOUPath": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The organizational unit (OU) in the domain, for example 'OU=testOU,DC=domain,DC=Domain,DC=com', used only when 'domainName' is specified."
      }
    },
    "useVMScaleSet": {
      "$ref": "#/definitions/YesOrNo",
      "defaultValue": "No",
      "metadata": {
        "description": "Specify whether you want to use the experimental feature to create compute nodes as VM scale set. Note that it is not recommended to use this feature in production cluster."
      }
    },
    "useSpotInstances": {
      "$ref": "#/definitions/YesOrNo",
      "defaultValue": "No",
      "metadata": {
        "description": "Specify whether you want to use the experimental feature to create compute nodes as <a href='https://azure.microsoft.com/pricing/spot/' target='_blank'>Azure Spot instances</a>. Note that it is not recommended to use this feature in production cluster."
      }
    },
    "autoInstallInfiniBandDriver": {
      "$ref": "#/definitions/YesOrNo",
      "defaultValue": "Yes",
      "metadata": {
        "description": "Specify whether you want to install InfiniBandDriver automatically for the VMs with InfiniBand network. This setting is ignored for the VMs without InfiniBand network."
      }
    },
    "dnsServer": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The DNS server for the compute nodes. If not specified, the DNS setting for the VNet will be applied. You can specify multiple DNS servers in order separated with ','."
      }
    },
    "userAssignedIdentity": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional, specify the resource ID of the user assigned identity to associate with the virtual machines in the form: /subscriptions/&lt;SubscriptionId&gt;/resourceGroups/&lt;ResourceGroupName&gt;/providers/Microsoft.ManagedIdentity/userAssignedIdentities/&lt;identityName&gt;"
      }
    }
  },
  "variables": {
    "_computeNodeNamePrefix": "[trim(parameters('computeNodeNamePrefix'))]",
    "emptyArray": [],
    "dnsServers": "[if(empty(trim(parameters('dnsServer'))), variables('emptyArray'), split(trim(parameters('dnsServer')), ','))]",
    "_computeNodeImages": "[union(variables('windowsComputeNodeImages'), createObject('CustomImage', createObject('id', trim(parameters('computeNodeImageResourceId')))))]",
    "computeNodeImageRef": "[variables('_computeNodeImages')[parameters('computeNodeImage')]]",
    "_availabilitySetName": "[if(empty(trim(parameters('availabilitySetName'))), 'passsyntaxchecking', trim(parameters('availabilitySetName')))]",
    "availabilityZonesSS": "[if(empty(trim(parameters('availabilityZones'))), variables('emptyArray'), split(trim(parameters('availabilityZones')), ','))]",
    "availabilityZonesVM": "[if(empty(trim(parameters('availabilityZones'))), createArray(''), split(trim(parameters('availabilityZones')), ','))]",
    "vnetID": "[resourceId(trim(parameters('virtualNetworkResourceGroupName')), 'Microsoft.Network/virtualNetworks', trim(parameters('virtualNetworkName')))]",
    "subnetRef": "[format('{0}/subnets/{1}', variables('vnetID'), trim(parameters('subnetName')))]",
    "rdmaASeries": [
      "Standard_A8",
      "Standard_A9"
    ],
    "cnRDMACapable": "[or(contains(variables('rdmaASeries'), parameters('computeNodeVMSize')), contains(toLower(split(parameters('computeNodeVMSize'), '_')[1]), 'r'))]",
    "autoEnableInfiniBand": "[equals(parameters('autoInstallInfiniBandDriver'), 'Yes')]",
    "useVmssForCN": "[equals(parameters('useVMScaleSet'), 'Yes')]",
    "vmPriority": "[if(equals(parameters('useSpotInstances'), 'Yes'), 'Spot', 'Regular')]",
    "computeVmssName": "[take(replace(variables('_computeNodeNamePrefix'), '-', ''), 9)]",
    "vmssSinglePlacementGroup": "[and(lessOrEquals(length(variables('availabilityZonesSS')), 1), lessOrEquals(parameters('computeNodeNumber'), 100))]",
    "headNodeFullname": "[split(trim(parameters('headNodeList')), ',')[0]]",
    "headNodeName": "[split(variables('headNodeFullname'), '.')[0]]",
    "diskTypes": {
      "Standard_HDD": "Standard_LRS",
      "Standard_SSD": "StandardSSD_LRS",
      "Premium_SSD": "Premium_LRS"
    },
    "sharedResxBaseUrl": "https://raw.githubusercontent.com/Azure/hpcpack-template/master/SharedResources/Generated",
    "windowsComputeNodeImages": {
      "WindowsServer2008R2": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2008-R2-SP1",
        "version": "latest"
      },
      "WindowsServer2012": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2012-Datacenter",
        "version": "latest"
      },
      "WindowsServer2012R2": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2012-R2-Datacenter",
        "version": "latest"
      },
      "WindowsServer2016": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2016-Datacenter",
        "version": "latest"
      },
      "WindowsServer2019": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2019-Datacenter",
        "version": "latest"
      },
      "WindowsServer2022": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2022-datacenter",
        "version": "latest"
      },
      "WindowsServer2012R2WithExcel": {
        "publisher": "MicrosoftWindowsServerHPCPack",
        "offer": "WindowsServerHPCPack",
        "sku": "2016U2CN-WS2012R2-Excel",
        "version": "latest"
      },
      "WindowsServer2016WithExcel": {
        "publisher": "MicrosoftWindowsServerHPCPack",
        "offer": "WindowsServerHPCPack",
        "sku": "2016U2CN-WS2016-Excel",
        "version": "latest"
      },
      "WindowsServer2012_Gen2": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2012-datacenter-gensecond",
        "version": "latest"
      },
      "WindowsServer2012R2_Gen2": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2012-r2-datacenter-gensecond",
        "version": "latest"
      },
      "WindowsServer2016_Gen2": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2016-datacenter-gensecond",
        "version": "latest"
      },
      "WindowsServer2019_Gen2": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2019-datacenter-gensecond",
        "version": "latest"
      },
      "WindowsServer2022_Gen2": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2022-datacenter-g2",
        "version": "latest"
      },
      "CustomImage": {}
    }
  },
  "resources": {
    "availabilitySet": {
      "condition": "[not(or(variables('useVmssForCN'), empty(trim(parameters('availabilitySetName')))))]",
      "type": "Microsoft.Compute/availabilitySets",
      "apiVersion": "2019-03-01",
      "name": "[variables('_availabilitySetName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Aligned"
      },
      "properties": {
        "platformUpdateDomainCount": 5,
        "platformFaultDomainCount": 2
      }
    },
    "keyvault": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "keyvaultandcert",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "vmName": {
            "value": "[variables('headNodeName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "12428119165023799088"
            }
          },
          "definitions": {
            "CertificateSettings": {
              "type": "object",
              "properties": {
                "vaultResourceGroup": {
                  "type": "string"
                },
                "vaultName": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "thumbprint": {
                  "type": "string"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "types-and-vars.bicep"
                }
              }
            }
          },
          "functions": [
            {
              "namespace": "__bicep",
              "members": {
                "isValidCertificateSettings": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/CertificateSettings",
                      "name": "certSettings"
                    }
                  ],
                  "output": {
                    "type": "bool",
                    "value": "[and(and(and(not(empty(parameters('certSettings').vaultResourceGroup)), not(empty(parameters('certSettings').vaultName))), not(empty(parameters('certSettings').url))), not(empty(parameters('certSettings').thumbprint)))]"
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "types-and-vars.bicep"
                    }
                  }
                },
                "vmTagsToCertSettings": {
                  "parameters": [
                    {
                      "type": "object",
                      "name": "tags"
                    }
                  ],
                  "output": {
                    "$ref": "#/definitions/CertificateSettings",
                    "value": "[union(variables('_1.defaultCertificateSettings'), toObject(filter(items(parameters('tags')), lambda('item', contains(variables('_1.tagsToCertificateSettingsKeyMap'), lambdaVariables('item').key))), lambda('obj', variables('_1.tagsToCertificateSettingsKeyMap')[lambdaVariables('obj').key]), lambda('obj', lambdaVariables('obj').value)))]"
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "types-and-vars.bicep"
                    }
                  }
                }
              }
            }
          ],
          "parameters": {
            "vmName": {
              "type": "string"
            }
          },
          "variables": {
            "_1.certificateSettingsToTagsKeyMap": {
              "vaultResourceGroup": "KV_RG",
              "vaultName": "KV_Name",
              "url": "KV_CertUrl",
              "thumbprint": "KV_CertThumbprint"
            },
            "_1.defaultCertificateSettings": {
              "vaultResourceGroup": "",
              "vaultName": "",
              "url": "",
              "thumbprint": ""
            },
            "_1.tagsToCertificateSettingsKeyMap": "[toObject(items(variables('_1.certificateSettingsToTagsKeyMap')), lambda('obj', lambdaVariables('obj').value), lambda('obj', lambdaVariables('obj').key))]"
          },
          "resources": {
            "vm": {
              "existing": true,
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2024-03-01",
              "name": "[parameters('vmName')]"
            }
          },
          "outputs": {
            "certSettings": {
              "$ref": "#/definitions/CertificateSettings",
              "nullable": true,
              "value": "[if(__bicep.isValidCertificateSettings(__bicep.vmTagsToCertSettings(reference('vm', '2024-03-01', 'full').tags)), __bicep.vmTagsToCertSettings(reference('vm', '2024-03-01', 'full').tags), null())]"
            }
          }
        }
      }
    },
    "monitor": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "monitor",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "vmName": {
            "value": "[variables('headNodeName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "14822410904223362833"
            }
          },
          "definitions": {
            "AzureMonitorLogSettings": {
              "type": "object",
              "properties": {
                "LA_MiResId": {
                  "type": "string"
                },
                "LA_MiClientId": {
                  "type": "string"
                },
                "LA_DcrId": {
                  "type": "string"
                },
                "LA_DcrStream": {
                  "type": "string"
                },
                "LA_DceUrl": {
                  "type": "string"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "types-and-vars.bicep"
                }
              }
            }
          },
          "parameters": {
            "vmName": {
              "type": "string"
            }
          },
          "resources": {
            "vm": {
              "existing": true,
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2024-03-01",
              "name": "[parameters('vmName')]"
            }
          },
          "outputs": {
            "logSettings": {
              "$ref": "#/definitions/AzureMonitorLogSettings",
              "nullable": true,
              "value": "[if(and(and(and(and(not(empty(reference('vm', '2024-03-01', 'full').tags.LA_DceUrl)), not(empty(reference('vm', '2024-03-01', 'full').tags.LA_DcrId))), not(empty(reference('vm', '2024-03-01', 'full').tags.LA_DcrStream))), not(empty(reference('vm', '2024-03-01', 'full').tags.LA_MiClientId))), not(empty(reference('vm', '2024-03-01', 'full').tags.LA_MiResId))), createObject('LA_DceUrl', reference('vm', '2024-03-01', 'full').tags.LA_DceUrl, 'LA_DcrId', reference('vm', '2024-03-01', 'full').tags.LA_DcrId, 'LA_DcrStream', reference('vm', '2024-03-01', 'full').tags.LA_DcrStream, 'LA_MiClientId', reference('vm', '2024-03-01', 'full').tags.LA_MiClientId, 'LA_MiResId', reference('vm', '2024-03-01', 'full').tags.LA_MiResId), null())]"
            }
          }
        }
      }
    },
    "computeNodes": {
      "copy": {
        "name": "computeNodes",
        "count": "[length(range(0, parameters('computeNodeNumber')))]"
      },
      "condition": "[not(variables('useVmssForCN'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('create{0}{1}', variables('_computeNodeNamePrefix'), padLeft(string(add(range(0, parameters('computeNodeNumber'))[copyIndex()], parameters('computeNodeNameStartIndex'))), 3, '0'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "subnetId": {
            "value": "[variables('subnetRef')]"
          },
          "vmName": {
            "value": "[format('{0}{1}', variables('_computeNodeNamePrefix'), padLeft(string(add(range(0, parameters('computeNodeNumber'))[copyIndex()], parameters('computeNodeNameStartIndex'))), 3, '0'))]"
          },
          "vmSize": {
            "value": "[parameters('computeNodeVMSize')]"
          },
          "osDiskType": {
            "value": "[variables('diskTypes')[parameters('computeNodeOsDiskType')]]"
          },
          "dataDiskSizeInGB": {
            "value": "[parameters('dataDiskSizeInGB')]"
          },
          "dataDiskCount": {
            "value": "[parameters('dataDiskCount')]"
          },
          "dataDiskType": {
            "value": "[variables('diskTypes')[parameters('dataDiskType')]]"
          },
          "imageReference": {
            "value": "[variables('computeNodeImageRef')]"
          },
          "imageOsPlatform": {
            "value": "windows"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminUserPassword')]"
          },
          "availabilitySetName": {
            "value": "[trim(parameters('availabilitySetName'))]"
          },
          "availabilityZone": {
            "value": "[variables('availabilityZonesVM')[mod(range(0, parameters('computeNodeNumber'))[copyIndex()], length(variables('availabilityZonesVM')))]]"
          },
          "vmPriority": {
            "value": "[variables('vmPriority')]"
          },
          "installRDMADriver": {
            "value": "[and(variables('cnRDMACapable'), variables('autoEnableInfiniBand'))]"
          },
          "enableAcceleratedNetworking": "[if(equals(parameters('enableAcceleratedNetworking'), 'Yes'), createObject('value', bool('true')), createObject('value', bool('false')))]",
          "dnsServers": {
            "value": "[variables('dnsServers')]"
          },
          "certSettings": {
            "value": "[coalesce(reference('keyvault').outputs.certSettings.value, createObject())]"
          },
          "headNodeList": {
            "value": "[trim(parameters('headNodeList'))]"
          },
          "joinDomain": {
            "value": "[not(empty(parameters('domainName')))]"
          },
          "domainName": {
            "value": "[trim(parameters('domainName'))]"
          },
          "domainOUPath": "[if(empty(parameters('domainName')), createObject('value', ''), createObject('value', parameters('domainOUPath')))]",
          "userAssignedIdentity": {
            "value": "[trim(parameters('userAssignedIdentity'))]"
          },
          "logSettings": {
            "value": "[reference('monitor').outputs.logSettings.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "6775817623703107717"
            }
          },
          "definitions": {
            "AzureMonitorLogSettings": {
              "type": "object",
              "properties": {
                "LA_MiResId": {
                  "type": "string"
                },
                "LA_MiClientId": {
                  "type": "string"
                },
                "LA_DcrId": {
                  "type": "string"
                },
                "LA_DcrStream": {
                  "type": "string"
                },
                "LA_DceUrl": {
                  "type": "string"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "types-and-vars.bicep"
                }
              }
            },
            "CertificateSettings": {
              "type": "object",
              "properties": {
                "vaultResourceGroup": {
                  "type": "string"
                },
                "vaultName": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "thumbprint": {
                  "type": "string"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "types-and-vars.bicep"
                }
              }
            },
            "OsType": {
              "type": "string",
              "allowedValues": [
                "linux",
                "windows"
              ],
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "types-and-vars.bicep"
                }
              }
            }
          },
          "functions": [
            {
              "namespace": "__bicep",
              "members": {
                "certSecretForLinux": {
                  "parameters": [
                    {
                      "type": "string",
                      "name": "vaultRg"
                    },
                    {
                      "type": "string",
                      "name": "vaultName"
                    },
                    {
                      "type": "string",
                      "name": "certificateUrl"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": {
                      "sourceVault": {
                        "id": "[resourceId(parameters('vaultRg'), 'Microsoft.KeyVault/vaults', parameters('vaultName'))]"
                      },
                      "vaultCertificates": [
                        {
                          "certificateUrl": "[parameters('certificateUrl')]"
                        }
                      ]
                    }
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "types-and-vars.bicep"
                    }
                  }
                },
                "certSecretForWindows": {
                  "parameters": [
                    {
                      "type": "string",
                      "name": "vaultRg"
                    },
                    {
                      "type": "string",
                      "name": "vaultName"
                    },
                    {
                      "type": "string",
                      "name": "certificateUrl"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": {
                      "sourceVault": {
                        "id": "[resourceId(parameters('vaultRg'), 'Microsoft.KeyVault/vaults', parameters('vaultName'))]"
                      },
                      "vaultCertificates": [
                        {
                          "certificateUrl": "[parameters('certificateUrl')]",
                          "certificateStore": "My"
                        }
                      ]
                    }
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "types-and-vars.bicep"
                    }
                  }
                }
              }
            }
          ],
          "parameters": {
            "subnetId": {
              "type": "string",
              "metadata": {
                "description": "The Id of the subnet in which the node is created"
              }
            },
            "vmName": {
              "type": "string",
              "metadata": {
                "description": "The VM name"
              }
            },
            "vmSize": {
              "type": "string",
              "metadata": {
                "description": "The VM role size"
              }
            },
            "osDiskType": {
              "type": "string",
              "defaultValue": "StandardSSD_LRS",
              "metadata": {
                "description": "The OS disk type of the VM"
              }
            },
            "dataDiskSizeInGB": {
              "type": "int",
              "defaultValue": 128,
              "metadata": {
                "description": "The size in GB of each data disk that is attached to the VM."
              }
            },
            "dataDiskCount": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "The count of data disks attached to the VM."
              }
            },
            "dataDiskType": {
              "type": "string",
              "defaultValue": "Standard_LRS",
              "metadata": {
                "description": "The data disk type of the VM"
              }
            },
            "imageReference": {
              "type": "object",
              "metadata": {
                "description": "The image reference"
              }
            },
            "imageOsPlatform": {
              "$ref": "#/definitions/OsType",
              "metadata": {
                "description": "The VM image OS platform for the compute nodes"
              }
            },
            "adminUsername": {
              "type": "string",
              "metadata": {
                "description": "The user name of the administrator"
              }
            },
            "adminPassword": {
              "type": "securestring",
              "metadata": {
                "description": "The password of the administrator"
              }
            },
            "sshPublicKey": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "If specified, the SSH Key for the administrator, only valid for Linux Virtual Machine."
              }
            },
            "availabilitySetName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The availability set name to join if specified, it cannot be specified together with 'availabilityZone'."
              }
            },
            "availabilityZone": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The availability zone where the VM is created if specified, it cannot be specified together with 'availabilitySetName'."
              }
            },
            "osDiskSizeInGB": {
              "type": "int",
              "defaultValue": 128,
              "minValue": 30,
              "maxValue": 1023,
              "metadata": {
                "description": "The os disk size in GB"
              }
            },
            "vmPriority": {
              "type": "string",
              "defaultValue": "Regular",
              "metadata": {
                "description": "Specify the priority of the virtual machines in the scale set, Regular or Low."
              }
            },
            "installRDMADriver": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specify whether to install RDMA driver"
              }
            },
            "enableAutomaticUpdates": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specify whether the VM is enabled for automatic updates, not used for Linux node"
              }
            },
            "enableAcceleratedNetworking": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specify whether to create the Azure VM with accelerated networking"
              }
            },
            "certSettings": {
              "$ref": "#/definitions/CertificateSettings",
              "metadata": {
                "description": "The certificate that shall be installed on the VM"
              }
            },
            "headNodeList": {
              "type": "string",
              "metadata": {
                "description": "The head node list"
              }
            },
            "joinDomain": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specify whether this node need to join domain."
              }
            },
            "domainName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The fully qualified domain name (FQDN) for the domain forest in which the cluster is created."
              }
            },
            "domainOUPath": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The organizational unit (OU) in the domain, used only when 'domainName' is specified."
              }
            },
            "userAssignedIdentity": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional, specify the resource ID of the user assigned identity to associate with the virtual machine in the form: /subscriptions/&lt;SubscriptionId&gt;/resourceGroups/&lt;ResourceGroupName&gt;/providers/Microsoft.ManagedIdentity/userAssignedIdentities/&lt;identityName&gt;"
              }
            },
            "dnsServers": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The DNS servers in order, if not configured, the DNS servers configured in the virtual network will be used."
              }
            },
            "licenseType": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Specifies the license type for the virtual machines. Use 'Windows_Server' for Azure Hybrid Benefit."
              }
            },
            "logSettings": {
              "$ref": "#/definitions/AzureMonitorLogSettings",
              "nullable": true,
              "metadata": {
                "description": "Azure Monitor log settings"
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "dataDisks",
                "count": "[length(range(0, if(equals(parameters('dataDiskCount'), 0), 1, parameters('dataDiskCount'))))]",
                "input": {
                  "lun": "[range(0, if(equals(parameters('dataDiskCount'), 0), 1, parameters('dataDiskCount')))[copyIndex('dataDisks')]]",
                  "name": "[format('{0}-datadisk-{1}', parameters('vmName'), range(0, if(equals(parameters('dataDiskCount'), 0), 1, parameters('dataDiskCount')))[copyIndex('dataDisks')])]",
                  "createOption": "Empty",
                  "diskSizeGB": "[parameters('dataDiskSizeInGB')]",
                  "managedDisk": {
                    "storageAccountType": "[parameters('dataDiskType')]"
                  }
                }
              }
            ],
            "tags": "[if(empty(parameters('logSettings')), createObject(), parameters('logSettings'))]",
            "userMiResIdForLog": "[if(empty(parameters('logSettings')), '', parameters('logSettings').LA_MiResId)]",
            "_userAssignedIdentity": "[trim(parameters('userAssignedIdentity'))]",
            "_userMiResIdForLog": "[trim(variables('userMiResIdForLog'))]",
            "noIdentity": "[and(empty(variables('_userAssignedIdentity')), empty(variables('_userMiResIdForLog')))]",
            "userIdentity": {
              "type": "UserAssigned",
              "userAssignedIdentities": {
                "[format('{0}', variables('_userAssignedIdentity'))]": {}
              }
            },
            "userIdentityForLog": {
              "type": "UserAssigned",
              "userAssignedIdentities": {
                "[format('{0}', variables('_userMiResIdForLog'))]": {}
              }
            },
            "bothIdentities": "[if(variables('noIdentity'), null(), createObject('type', 'UserAssigned', 'userAssignedIdentities', createObject(format('{0}', variables('_userAssignedIdentity')), createObject(), format('{0}', variables('_userMiResIdForLog')), createObject())))]",
            "identity": "[if(variables('noIdentity'), null(), if(and(not(empty(variables('_userAssignedIdentity'))), not(empty(variables('_userMiResIdForLog')))), variables('bothIdentities'), if(not(empty(variables('_userAssignedIdentity'))), variables('userIdentity'), variables('userIdentityForLog'))))]",
            "nicName": "[format('{0}-nic-{1}', parameters('vmName'), uniqueString(parameters('subnetId')))]",
            "isWindowsOS": "[equals(toLower(parameters('imageOsPlatform')), 'windows')]",
            "trimmedSSHPublicKey": "[trim(parameters('sshPublicKey'))]",
            "windowsConfiguration": {
              "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]"
            },
            "emptyArray": [],
            "availabilitySet": {
              "id": "[resourceId('Microsoft.Compute/availabilitySets', trim(parameters('availabilitySetName')))]"
            },
            "availabilityZones": [
              "[trim(parameters('availabilityZone'))]"
            ],
            "dnsSettings": {
              "dnsServers": "[parameters('dnsServers')]"
            },
            "protectedSettings": {
              "userPassword": "[parameters('adminPassword')]"
            },
            "sshKeyConfig": {
              "publicKeys": [
                {
                  "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('adminUsername'))]",
                  "keyData": "[variables('trimmedSSHPublicKey')]"
                }
              ]
            },
            "linuxConfiguration": {
              "disablePasswordAuthentication": "[not(empty(variables('trimmedSSHPublicKey')))]",
              "ssh": "[if(empty(variables('trimmedSSHPublicKey')), null(), variables('sshKeyConfig'))]"
            }
          },
          "resources": {
            "nic": {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2019-04-01",
              "name": "[variables('nicName')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "IPConfig",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetId')]"
                      }
                    }
                  }
                ],
                "dnsSettings": "[if(empty(parameters('dnsServers')), null(), variables('dnsSettings'))]",
                "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]"
              }
            },
            "vm": {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2019-03-01",
              "name": "[parameters('vmName')]",
              "location": "[resourceGroup().location]",
              "identity": "[variables('identity')]",
              "tags": "[variables('tags')]",
              "properties": {
                "availabilitySet": "[if(empty(trim(parameters('availabilitySetName'))), null(), variables('availabilitySet'))]",
                "hardwareProfile": {
                  "vmSize": "[parameters('vmSize')]"
                },
                "osProfile": {
                  "computerName": "[parameters('vmName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]",
                  "linuxConfiguration": "[if(variables('isWindowsOS'), null(), variables('linuxConfiguration'))]",
                  "windowsConfiguration": "[if(variables('isWindowsOS'), variables('windowsConfiguration'), null())]",
                  "secrets": [
                    "[if(equals(parameters('imageOsPlatform'), 'windows'), __bicep.certSecretForWindows(parameters('certSettings').vaultResourceGroup, parameters('certSettings').vaultName, parameters('certSettings').url), __bicep.certSecretForLinux(parameters('certSettings').vaultResourceGroup, parameters('certSettings').vaultName, parameters('certSettings').url))]"
                  ]
                },
                "licenseType": "[if(equals(parameters('licenseType'), ''), null(), parameters('licenseType'))]",
                "storageProfile": {
                  "imageReference": "[parameters('imageReference')]",
                  "osDisk": {
                    "name": "[format('{0}-osdisk', parameters('vmName'))]",
                    "caching": "ReadOnly",
                    "createOption": "FromImage",
                    "diskSizeGB": "[parameters('osDiskSizeInGB')]",
                    "managedDisk": {
                      "storageAccountType": "[parameters('osDiskType')]"
                    }
                  },
                  "dataDisks": "[if(equals(parameters('dataDiskCount'), 0), variables('emptyArray'), variables('dataDisks'))]"
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
                    }
                  ]
                },
                "priority": "[parameters('vmPriority')]",
                "evictionPolicy": "[if(equals(parameters('vmPriority'), 'Regular'), null(), 'Deallocate')]"
              },
              "zones": "[if(empty(trim(parameters('availabilityZone'))), variables('emptyArray'), variables('availabilityZones'))]",
              "dependsOn": [
                "nic"
              ]
            },
            "windowsIBDriver": {
              "condition": "[and(variables('isWindowsOS'), parameters('installRDMADriver'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2019-03-01",
              "name": "[format('{0}/{1}', parameters('vmName'), 'installInfiniBandDriverWindows')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "publisher": "Microsoft.HpcCompute",
                "type": "InfiniBandDriverWindows",
                "typeHandlerVersion": "1.5",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "vm"
              ]
            },
            "windowsNodeAgent": {
              "condition": "[variables('isWindowsOS')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2019-03-01",
              "name": "[format('{0}/{1}', parameters('vmName'), 'configHpcComputeNode')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "publisher": "Microsoft.HpcPack",
                "type": "HPCComputeNode",
                "typeHandlerVersion": "16.2",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "domainName": "[parameters('domainName')]",
                  "ouPath": "[parameters('domainOUPath')]",
                  "userName": "[parameters('adminUsername')]",
                  "headNodeList": "[parameters('headNodeList')]",
                  "certThumbprint": "[parameters('certSettings').thumbprint]",
                  "nonDomainRole": "[not(parameters('joinDomain'))]"
                },
                "protectedSettings": "[if(parameters('joinDomain'), variables('protectedSettings'), null())]"
              },
              "dependsOn": [
                "vm",
                "windowsIBDriver"
              ]
            },
            "linuxIBDriver": {
              "condition": "[and(not(variables('isWindowsOS')), parameters('installRDMADriver'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2019-03-01",
              "name": "[format('{0}/{1}', parameters('vmName'), 'installInfiniBandDriverLinux')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "publisher": "Microsoft.HpcCompute",
                "type": "InfiniBandDriverLinux",
                "typeHandlerVersion": "1.2",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "vm"
              ]
            },
            "linuxNodeAgent": {
              "condition": "[not(variables('isWindowsOS'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2019-03-01",
              "name": "[format('{0}/{1}', parameters('vmName'), 'installHPCNodeAgent')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "publisher": "Microsoft.HpcPack",
                "type": "LinuxNodeAgent2016U1",
                "typeHandlerVersion": "16.2",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "ClusterConnectionString": "[parameters('headNodeList')]",
                  "SSLThumbprint": "[parameters('certSettings').thumbprint]",
                  "DomainName": "[parameters('domainName')]"
                }
              },
              "dependsOn": [
                "linuxIBDriver",
                "vm"
              ]
            }
          }
        }
      },
      "dependsOn": [
        "availabilitySet",
        "keyvault",
        "monitor"
      ]
    },
    "computeVmss": {
      "condition": "[and(greater(parameters('computeNodeNumber'), 0), variables('useVmssForCN'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('create{0}', variables('computeVmssName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "subnetId": {
            "value": "[variables('subnetRef')]"
          },
          "vmssName": {
            "value": "[variables('computeVmssName')]"
          },
          "vmSize": {
            "value": "[parameters('computeNodeVMSize')]"
          },
          "vmNumber": {
            "value": "[parameters('computeNodeNumber')]"
          },
          "osDiskType": {
            "value": "[variables('diskTypes')[parameters('computeNodeOsDiskType')]]"
          },
          "dataDiskSizeInGB": {
            "value": "[parameters('dataDiskSizeInGB')]"
          },
          "dataDiskCount": {
            "value": "[parameters('dataDiskCount')]"
          },
          "dataDiskType": {
            "value": "[variables('diskTypes')[parameters('dataDiskType')]]"
          },
          "imageReference": {
            "value": "[variables('computeNodeImageRef')]"
          },
          "imageOsPlatform": {
            "value": "windows"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminUserPassword')]"
          },
          "singlePlacementGroup": {
            "value": "[variables('vmssSinglePlacementGroup')]"
          },
          "availabilityZones": {
            "value": "[variables('availabilityZonesSS')]"
          },
          "vmPriority": {
            "value": "[variables('vmPriority')]"
          },
          "installRDMADriver": {
            "value": "[and(variables('cnRDMACapable'), variables('autoEnableInfiniBand'))]"
          },
          "enableAcceleratedNetworking": "[if(equals(parameters('enableAcceleratedNetworking'), 'Yes'), createObject('value', bool('true')), createObject('value', bool('false')))]",
          "dnsServers": {
            "value": "[variables('dnsServers')]"
          },
          "certSettings": {
            "value": "[coalesce(reference('keyvault').outputs.certSettings.value, createObject())]"
          },
          "headNodeList": {
            "value": "[trim(parameters('headNodeList'))]"
          },
          "joinDomain": {
            "value": "[not(empty(parameters('domainName')))]"
          },
          "domainName": {
            "value": "[trim(parameters('domainName'))]"
          },
          "domainOUPath": "[if(empty(parameters('domainName')), createObject('value', ''), createObject('value', parameters('domainOUPath')))]",
          "userAssignedIdentity": {
            "value": "[trim(parameters('userAssignedIdentity'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "6213467785962806661"
            }
          },
          "definitions": {
            "CertificateSettings": {
              "type": "object",
              "properties": {
                "vaultResourceGroup": {
                  "type": "string"
                },
                "vaultName": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "thumbprint": {
                  "type": "string"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "types-and-vars.bicep"
                }
              }
            },
            "OsType": {
              "type": "string",
              "allowedValues": [
                "linux",
                "windows"
              ],
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "types-and-vars.bicep"
                }
              }
            }
          },
          "functions": [
            {
              "namespace": "__bicep",
              "members": {
                "certSecretForLinux": {
                  "parameters": [
                    {
                      "type": "string",
                      "name": "vaultRg"
                    },
                    {
                      "type": "string",
                      "name": "vaultName"
                    },
                    {
                      "type": "string",
                      "name": "certificateUrl"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": {
                      "sourceVault": {
                        "id": "[resourceId(parameters('vaultRg'), 'Microsoft.KeyVault/vaults', parameters('vaultName'))]"
                      },
                      "vaultCertificates": [
                        {
                          "certificateUrl": "[parameters('certificateUrl')]"
                        }
                      ]
                    }
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "types-and-vars.bicep"
                    }
                  }
                },
                "certSecretForWindows": {
                  "parameters": [
                    {
                      "type": "string",
                      "name": "vaultRg"
                    },
                    {
                      "type": "string",
                      "name": "vaultName"
                    },
                    {
                      "type": "string",
                      "name": "certificateUrl"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": {
                      "sourceVault": {
                        "id": "[resourceId(parameters('vaultRg'), 'Microsoft.KeyVault/vaults', parameters('vaultName'))]"
                      },
                      "vaultCertificates": [
                        {
                          "certificateUrl": "[parameters('certificateUrl')]",
                          "certificateStore": "My"
                        }
                      ]
                    }
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "types-and-vars.bicep"
                    }
                  }
                }
              }
            }
          ],
          "parameters": {
            "subnetId": {
              "type": "string",
              "metadata": {
                "description": "The Id of the subnet in which the VMSS instances are created"
              }
            },
            "vmssName": {
              "type": "string",
              "metadata": {
                "description": "The VMSS name as well as the VM computer name prefix"
              }
            },
            "vmNumber": {
              "type": "int",
              "metadata": {
                "description": "The number of VMs in the VMSS."
              }
            },
            "vmSize": {
              "type": "string",
              "metadata": {
                "description": "The VM role size"
              }
            },
            "osDiskType": {
              "type": "string",
              "defaultValue": "StandardSSD_LRS",
              "metadata": {
                "description": "The OS disk type of the VM"
              }
            },
            "dataDiskSizeInGB": {
              "type": "int",
              "defaultValue": 128,
              "metadata": {
                "description": "The size in GB of each data disk that is attached to the VM."
              }
            },
            "dataDiskCount": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "The count of data disks attached to the VM."
              }
            },
            "dataDiskType": {
              "type": "string",
              "defaultValue": "Standard_LRS",
              "metadata": {
                "description": "The data disk type of the VM"
              }
            },
            "imageReference": {
              "type": "object",
              "metadata": {
                "description": "The image reference"
              }
            },
            "imageOsPlatform": {
              "$ref": "#/definitions/OsType",
              "metadata": {
                "description": "The VM image OS platform for the compute nodes"
              }
            },
            "adminUsername": {
              "type": "string",
              "metadata": {
                "description": "The user name of the administrator"
              }
            },
            "adminPassword": {
              "type": "securestring",
              "metadata": {
                "description": "The password of the administrator"
              }
            },
            "sshPublicKey": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "If specified, the SSH Key for the administrator, only valid for Linux Virtual Machine."
              }
            },
            "availabilityZones": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The availability zones where the VM instances are created if specified."
              }
            },
            "osDiskSizeInGB": {
              "type": "int",
              "defaultValue": 128,
              "minValue": 30,
              "maxValue": 1023,
              "metadata": {
                "description": "The os disk size in GB"
              }
            },
            "singlePlacementGroup": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Specify whether the scale set is limited to a single placement group"
              }
            },
            "vmPriority": {
              "type": "string",
              "defaultValue": "Regular",
              "metadata": {
                "description": "Specify the priority of the virtual machines in the scale set, Regular or Low."
              }
            },
            "installRDMADriver": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specify whether to install RDMA driver"
              }
            },
            "enableAutomaticUpdates": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specify whether the VM is enabled for automatic updates, not used for Linux node"
              }
            },
            "enableAcceleratedNetworking": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specify whether to create the Azure VM with accelerated networking"
              }
            },
            "certSettings": {
              "$ref": "#/definitions/CertificateSettings",
              "metadata": {
                "description": "The certificate that shall be installed on the VM"
              }
            },
            "headNodeList": {
              "type": "string",
              "metadata": {
                "description": "The head node list"
              }
            },
            "joinDomain": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specify whether this node need to join domain."
              }
            },
            "domainName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The fully qualified domain name (FQDN) for the domain forest in which the cluster is created."
              }
            },
            "domainOUPath": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The organizational unit (OU) in the domain, used only when 'domainName' is specified."
              }
            },
            "userAssignedIdentity": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional, specify the resource ID of the user assigned identity to associate with the virtual machine in the form: /subscriptions/&lt;SubscriptionId&gt;/resourceGroups/&lt;ResourceGroupName&gt;/providers/Microsoft.ManagedIdentity/userAssignedIdentities/&lt;identityName&gt;"
              }
            },
            "dnsServers": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The DNS servers in order, if not configured, the DNS servers configured in the virtual network will be used."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "dataDisks",
                "count": "[length(range(0, if(equals(parameters('dataDiskCount'), 0), 1, parameters('dataDiskCount'))))]",
                "input": {
                  "lun": "[range(0, if(equals(parameters('dataDiskCount'), 0), 1, parameters('dataDiskCount')))[copyIndex('dataDisks')]]",
                  "createOption": "Empty",
                  "diskSizeGB": "[parameters('dataDiskSizeInGB')]",
                  "managedDisk": {
                    "storageAccountType": "[parameters('dataDiskType')]"
                  }
                }
              }
            ],
            "userAssignedIdentityObject": {
              "type": "UserAssigned",
              "userAssignedIdentities": {
                "[format('{0}', parameters('userAssignedIdentity'))]": {}
              }
            },
            "isWindowsOS": "[equals(toLower(parameters('imageOsPlatform')), 'windows')]",
            "trimmedSSHPublicKey": "[trim(parameters('sshPublicKey'))]",
            "windowsConfiguration": {
              "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]"
            },
            "emptyArray": [],
            "dnsSettings": {
              "dnsServers": "[parameters('dnsServers')]"
            },
            "protectedSettings": {
              "userPassword": "[parameters('adminPassword')]"
            },
            "sshKeyConfig": {
              "publicKeys": [
                {
                  "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('adminUsername'))]",
                  "keyData": "[variables('trimmedSSHPublicKey')]"
                }
              ]
            },
            "linuxConfiguration": {
              "disablePasswordAuthentication": "[not(empty(variables('trimmedSSHPublicKey')))]",
              "ssh": "[if(empty(variables('trimmedSSHPublicKey')), null(), variables('sshKeyConfig'))]"
            },
            "lnxBasicExtension": [
              {
                "name": "installHPCNodeAgent",
                "properties": {
                  "provisionAfterExtensions": "[if(parameters('installRDMADriver'), array('installRDMADriver'), variables('emptyArray'))]",
                  "publisher": "Microsoft.HpcPack",
                  "type": "LinuxNodeAgent2016U1",
                  "typeHandlerVersion": "16.2",
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                    "ClusterConnectionString": "[parameters('headNodeList')]",
                    "SSLThumbprint": "[parameters('certSettings').thumbprint]",
                    "DomainName": "[parameters('domainName')]"
                  }
                }
              }
            ],
            "winBasicExtension": [
              {
                "name": "configHpcComputeNode",
                "properties": {
                  "provisionAfterExtensions": "[if(parameters('installRDMADriver'), array('installRDMADriver'), variables('emptyArray'))]",
                  "publisher": "Microsoft.HpcPack",
                  "type": "HPCComputeNode",
                  "typeHandlerVersion": "16.2",
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                    "domainName": "[parameters('domainName')]",
                    "ouPath": "[parameters('domainOUPath')]",
                    "userName": "[parameters('adminUsername')]",
                    "headNodeList": "[parameters('headNodeList')]",
                    "certThumbprint": "[parameters('certSettings').thumbprint]",
                    "nonDomainRole": "[not(parameters('joinDomain'))]"
                  },
                  "protectedSettings": "[if(parameters('joinDomain'), variables('protectedSettings'), null())]"
                }
              }
            ],
            "hpcWinDriverExtension": {
              "name": "installRDMADriver",
              "properties": {
                "publisher": "Microsoft.HpcCompute",
                "type": "InfiniBandDriverWindows",
                "typeHandlerVersion": "1.5",
                "autoUpgradeMinorVersion": true,
                "settings": {}
              }
            },
            "hpcLinuxDriverExtension": {
              "name": "installRDMADriver",
              "properties": {
                "publisher": "Microsoft.HpcCompute",
                "type": "InfiniBandDriverLinux",
                "typeHandlerVersion": "1.2",
                "autoUpgradeMinorVersion": true,
                "settings": {}
              }
            },
            "basicVmssExtension": "[if(variables('isWindowsOS'), variables('winBasicExtension'), variables('lnxBasicExtension'))]",
            "hpcDriverExtension": "[if(variables('isWindowsOS'), variables('hpcWinDriverExtension'), variables('hpcLinuxDriverExtension'))]",
            "vmssExtensions": "[if(parameters('installRDMADriver'), concat(variables('basicVmssExtension'), array(variables('hpcDriverExtension'))), variables('basicVmssExtension'))]"
          },
          "resources": {
            "vmss": {
              "type": "Microsoft.Compute/virtualMachineScaleSets",
              "apiVersion": "2019-03-01",
              "name": "[parameters('vmssName')]",
              "location": "[resourceGroup().location]",
              "sku": {
                "name": "[parameters('vmSize')]",
                "tier": "Standard",
                "capacity": "[parameters('vmNumber')]"
              },
              "identity": "[if(empty(trim(parameters('userAssignedIdentity'))), null(), variables('userAssignedIdentityObject'))]",
              "properties": {
                "singlePlacementGroup": "[parameters('singlePlacementGroup')]",
                "overprovision": false,
                "upgradePolicy": {
                  "mode": "Manual"
                },
                "virtualMachineProfile": {
                  "storageProfile": {
                    "imageReference": "[parameters('imageReference')]",
                    "osDisk": {
                      "caching": "ReadOnly",
                      "createOption": "FromImage",
                      "diskSizeGB": "[parameters('osDiskSizeInGB')]",
                      "managedDisk": {
                        "storageAccountType": "[parameters('osDiskType')]"
                      }
                    },
                    "dataDisks": "[if(equals(parameters('dataDiskCount'), 0), variables('emptyArray'), variables('dataDisks'))]"
                  },
                  "osProfile": {
                    "computerNamePrefix": "[parameters('vmssName')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]",
                    "linuxConfiguration": "[if(variables('isWindowsOS'), null(), variables('linuxConfiguration'))]",
                    "windowsConfiguration": "[if(variables('isWindowsOS'), variables('windowsConfiguration'), null())]",
                    "secrets": [
                      "[if(equals(parameters('imageOsPlatform'), 'windows'), __bicep.certSecretForWindows(parameters('certSettings').vaultResourceGroup, parameters('certSettings').vaultName, parameters('certSettings').url), __bicep.certSecretForLinux(parameters('certSettings').vaultResourceGroup, parameters('certSettings').vaultName, parameters('certSettings').url))]"
                    ]
                  },
                  "networkProfile": {
                    "networkInterfaceConfigurations": [
                      {
                        "name": "nicconfig1",
                        "properties": {
                          "primary": true,
                          "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]",
                          "dnsSettings": "[if(empty(parameters('dnsServers')), null(), variables('dnsSettings'))]",
                          "ipConfigurations": [
                            {
                              "name": "ipconfig1",
                              "properties": {
                                "subnet": {
                                  "id": "[parameters('subnetId')]"
                                }
                              }
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "extensionProfile": {
                    "extensions": "[variables('vmssExtensions')]"
                  },
                  "priority": "[parameters('vmPriority')]",
                  "evictionPolicy": "[if(equals(parameters('vmPriority'), 'Regular'), null(), 'Deallocate')]"
                }
              },
              "zones": "[parameters('availabilityZones')]"
            }
          }
        }
      },
      "dependsOn": [
        "keyvault"
      ]
    }
  }
}